#!/usr/bin/env python3
"""
Cursor Security Integration - ‡∏ü‡∏£‡∏µ 100%
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Cursor AI ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ GitHub
"""

import os
import json
import time
import threading
import subprocess
from pathlib import Path
from typing import Dict, List, Optional
from github_security_system import GitHubSecuritySystem
import logging

class CursorSecurityIntegration:
    def __init__(self, workspace_path: str):
        self.workspace_path = Path(workspace_path)
        self.security_system = GitHubSecuritySystem(workspace_path)
        
        # ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
        self.security_status_file = self.workspace_path / ".cursor_security_status.json"
        self.security_alerts_file = self.workspace_path / ".cursor_security_alerts.json"
        self.watch_files = [".env", "config.json", "secrets.json"]
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.is_monitoring = False
        self.last_scan_time = 0
        self.security_violations = []
        
        self.init_security_integration()
    
    def init_security_integration(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        self.logger.info("üîí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Cursor Security Integration")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.update_security_status("initialized", "Security system ready")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ file watchers
        self.setup_file_watchers()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Cursor extension
        self.create_cursor_security_extension()
        
        self.logger.info("‚úÖ Cursor Security Integration ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    def setup_file_watchers(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
        self.logger.info("üëÄ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô monitoring thread
        monitor_thread = threading.Thread(target=self._monitor_files, daemon=True)
        monitor_thread.start()
        
        self.is_monitoring = True
    
    def _monitor_files(self):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        file_timestamps = {}
        
        while self.is_monitoring:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
                for pattern in self.watch_files:
                    for file_path in self.workspace_path.rglob(pattern):
                        if file_path.is_file():
                            current_time = file_path.stat().st_mtime
                            
                            if str(file_path) not in file_timestamps:
                                file_timestamps[str(file_path)] = current_time
                            elif current_time > file_timestamps[str(file_path)]:
                                # ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                                self._handle_file_change(file_path)
                                file_timestamps[str(file_path)] = current_time
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                time.sleep(2)
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå: {e}")
                time.sleep(5)
    
    def _handle_file_change(self, file_path: Path):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"""
        self.logger.info(f"üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {file_path}")
        
        # ‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        issues = self.security_system._scan_file_for_secrets(file_path)
        
        if issues:
            # ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            self._handle_security_violation(file_path, issues)
        else:
            # ‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            self.update_security_status("file_safe", f"File {file_path.name} is secure")
    
    def _handle_security_violation(self, file_path: Path, issues: List[Dict]):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        self.logger.warning(f"üö® ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô {file_path}")
        
        violation = {
            "timestamp": time.time(),
            "file": str(file_path),
            "issues": issues,
            "severity": max(issue.get("severity", "low") for issue in issues),
            "action_taken": "blocked"
        }
        
        self.security_violations.append(violation)
        
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Cursor
        self.send_security_alert(violation)
        
        # ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£ commit (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô high severity)
        if violation["severity"] == "high":
            self._block_commit(file_path, issues)
    
    def send_security_alert(self, violation: Dict):
        """‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cursor"""
        alert = {
            "timestamp": violation["timestamp"],
            "type": "security_violation",
            "severity": violation["severity"],
            "file": violation["file"],
            "message": f"üö® Security issue detected in {Path(violation['file']).name}",
            "details": violation["issues"],
            "actions": [
                "Remove sensitive data",
                "Use environment variables",
                "Add to .gitignore"
            ]
        }
        
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            alerts = []
            if self.security_alerts_file.exists():
                with open(self.security_alerts_file, 'r', encoding='utf-8') as f:
                    alerts = json.load(f)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
            alerts.append(alert)
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 50 ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if len(alerts) > 50:
                alerts = alerts[-50:]
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            with open(self.security_alerts_file, 'w', encoding='utf-8') as f:
                json.dump(alerts, f, indent=2, ensure_ascii=False)
            
            self.logger.info("üì¢ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cursor")
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {e}")
    
    def _block_commit(self, file_path: Path, issues: List[Dict]):
        """‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£ commit ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á"""
        self.logger.warning(f"üõë ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£ commit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {file_path}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á pre-commit hook ‡∏ó‡∏µ‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
        git_hooks_dir = self.workspace_path / ".git" / "hooks"
        git_hooks_dir.mkdir(exist_ok=True)
        
        pre_commit_hook = git_hooks_dir / "pre-commit"
        
        hook_script = f'''#!/bin/bash
# Security check - Auto-generated by Cursor Security Integration

echo "üîí Checking for security violations..."

# Check if {file_path.name} has been modified
if git diff --cached --name-only | grep -q "{file_path.name}"; then
    echo "üö® SECURITY VIOLATION: {file_path.name} contains sensitive data!"
    echo "Please remove API keys, passwords, or other secrets before committing."
    echo ""
    echo "Issues found:"
'''
        
        for issue in issues:
            hook_script += f'    echo "  - Line {issue["line"]}: {issue["match"][:30]}..."'
        
        hook_script += '''
    echo ""
    echo "Solutions:"
    echo "  1. Move secrets to .env file"
    echo "  2. Use environment variables"
    echo "  3. Add sensitive files to .gitignore"
    echo ""
    exit 1
fi

echo "‚úÖ Security check passed"
exit 0
'''
        
        try:
            with open(pre_commit_hook, 'w', encoding='utf-8') as f:
                f.write(hook_script)
            
            # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ executable
            os.chmod(pre_commit_hook, 0o755)
            
            self.logger.info("üõë ‡∏™‡∏£‡πâ‡∏≤‡∏á pre-commit hook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£ commit")
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á pre-commit hook: {e}")
    
    def update_security_status(self, status: str, message: str):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        status_data = {
            "timestamp": time.time(),
            "status": status,
            "message": message,
            "violations_count": len(self.security_violations),
            "last_scan": self.last_scan_time,
            "monitoring": self.is_monitoring
        }
        
        try:
            with open(self.security_status_file, 'w', encoding='utf-8') as f:
                json.dump(status_data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {e}")
    
    def perform_security_scan(self) -> Dict:
        """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        self.logger.info("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.update_security_status("scanning", "Performing security scan...")
        
        # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
        results = self.security_system.scan_project_for_secrets()
        self.last_scan_time = results["timestamp"]
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if results["risk_level"] == "high":
            self.update_security_status("high_risk", f"Found {len(results['issues_found'])} security issues")
        elif results["risk_level"] == "medium":
            self.update_security_status("medium_risk", f"Found {len(results['issues_found'])} potential issues")
        else:
            self.update_security_status("secure", "No security issues found")
        
        return results
    
    def create_cursor_security_extension(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Cursor extension ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        extension_dir = self.workspace_path / ".cursor" / "extensions"
        extension_dir.mkdir(parents=True, exist_ok=True)
        
        extension_script = '''
// Cursor Security Extension
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cursor AI

class CursorSecurityExtension {
    constructor() {
        this.statusFile = '.cursor_security_status.json';
        this.alertsFile = '.cursor_security_alerts.json';
        this.isMonitoring = false;
        
        this.init();
    }
    
    async init() {
        console.log('üîí Cursor Security Extension initialized');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á UI
        this.createSecurityPanel();
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        this.startMonitoring();
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners
        this.setupEventListeners();
    }
    
    createSecurityPanel() {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á security panel ‡πÉ‡∏ô Cursor UI
        const panel = document.createElement('div');
        panel.id = 'security-panel';
        panel.innerHTML = `
            <div style="padding: 15px; border: 2px solid #ff6b6b; border-radius: 8px; margin: 10px; background: #fff5f5;">
                <h3 style="margin: 0 0 10px 0; color: #d63031;">üîí Security Monitor</h3>
                
                <div id="security-status" style="margin: 10px 0;">
                    <span id="status-indicator">üü°</span>
                    <span id="status-text">Initializing...</span>
                </div>
                
                <div id="security-actions" style="margin: 10px 0;">
                    <button onclick="securityExt.performScan()" style="padding: 5px 10px; margin: 2px; background: #0984e3; color: white; border: none; border-radius: 3px; cursor: pointer;">
                        üîç Scan Now
                    </button>
                    <button onclick="securityExt.viewAlerts()" style="padding: 5px 10px; margin: 2px; background: #e17055; color: white; border: none; border-radius: 3px; cursor: pointer;">
                        üö® View Alerts
                    </button>
                    <button onclick="securityExt.generateReport()" style="padding: 5px 10px; margin: 2px; background: #00b894; color: white; border: none; border-radius: 3px; cursor: pointer;">
                        üìä Report
                    </button>
                </div>
                
                <div id="security-alerts" style="max-height: 200px; overflow-y: auto; margin: 10px 0;">
                    <!-- Alerts will be displayed here -->
                </div>
                
                <div id="security-tips" style="font-size: 12px; color: #636e72; margin-top: 10px;">
                    üí° Tips: Never commit API keys, use .env files, scan before push
                </div>
            </div>
        `;
        
        // ‡πÅ‡∏ó‡∏£‡∏Å‡πÉ‡∏ô Cursor UI
        const sidebar = document.querySelector('.sidebar') || 
                       document.querySelector('.panel') || 
                       document.body;
        sidebar.appendChild(panel);
    }
    
    startMonitoring() {
        if (this.isMonitoring) return;
        
        this.isMonitoring = true;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        this.monitorInterval = setInterval(() => {
            this.checkSecurityStatus();
            this.checkAlerts();
        }, 3000);
        
        console.log('üëÄ Security monitoring started');
    }
    
    stopMonitoring() {
        this.isMonitoring = false;
        if (this.monitorInterval) {
            clearInterval(this.monitorInterval);
        }
        console.log('‚èπÔ∏è Security monitoring stopped');
    }
    
    async checkSecurityStatus() {
        try {
            const response = await this.readFile(this.statusFile);
            if (response) {
                const status = JSON.parse(response);
                this.updateStatusDisplay(status);
            }
        } catch (error) {
            console.error('Error checking security status:', error);
        }
    }
    
    async checkAlerts() {
        try {
            const response = await this.readFile(this.alertsFile);
            if (response) {
                const alerts = JSON.parse(response);
                this.updateAlertsDisplay(alerts);
            }
        } catch (error) {
            // File might not exist yet
        }
    }
    
    updateStatusDisplay(status) {
        const indicator = document.getElementById('status-indicator');
        const text = document.getElementById('status-text');
        
        if (!indicator || !text) return;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        switch (status.status) {
            case 'secure':
                indicator.textContent = 'üü¢';
                text.textContent = 'Secure';
                text.style.color = '#00b894';
                break;
            case 'medium_risk':
                indicator.textContent = 'üü°';
                text.textContent = 'Medium Risk';
                text.style.color = '#fdcb6e';
                break;
            case 'high_risk':
                indicator.textContent = 'üî¥';
                text.textContent = 'High Risk';
                text.style.color = '#e17055';
                break;
            case 'scanning':
                indicator.textContent = 'üîÑ';
                text.textContent = 'Scanning...';
                text.style.color = '#0984e3';
                break;
            default:
                indicator.textContent = 'üü°';
                text.textContent = status.message || 'Unknown';
                text.style.color = '#636e72';
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î
        if (status.violations_count > 0) {
            text.textContent += ` (${status.violations_count} issues)`;
        }
    }
    
    updateAlertsDisplay(alerts) {
        const alertsContainer = document.getElementById('security-alerts');
        if (!alertsContainer) return;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const recentAlerts = alerts.slice(-5).reverse();
        
        alertsContainer.innerHTML = recentAlerts.map(alert => `
            <div style="padding: 8px; margin: 5px 0; border-left: 3px solid ${this.getSeverityColor(alert.severity)}; background: #f8f9fa; border-radius: 3px;">
                <div style="font-weight: bold; font-size: 12px;">
                    ${this.getSeverityIcon(alert.severity)} ${alert.message}
                </div>
                <div style="font-size: 11px; color: #636e72; margin-top: 3px;">
                    ${new Date(alert.timestamp * 1000).toLocaleTimeString()}
                </div>
            </div>
        `).join('');
        
        // ‡πÅ‡∏™‡∏î‡∏á notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
        if (alerts.length > 0) {
            const latestAlert = alerts[alerts.length - 1];
            const now = Date.now() / 1000;
            
            // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            if (now - latestAlert.timestamp < 10) {
                this.showNotification(latestAlert);
            }
        }
    }
    
    getSeverityColor(severity) {
        switch (severity) {
            case 'high': return '#e17055';
            case 'medium': return '#fdcb6e';
            case 'low': return '#74b9ff';
            default: return '#636e72';
        }
    }
    
    getSeverityIcon(severity) {
        switch (severity) {
            case 'high': return 'üö®';
            case 'medium': return '‚ö†Ô∏è';
            case 'low': return '‚ÑπÔ∏è';
            default: return 'üìù';
        }
    }
    
    showNotification(alert) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification popup
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${alert.severity === 'high' ? '#e17055' : '#fdcb6e'};
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 10000;
            max-width: 350px;
            animation: slideIn 0.3s ease;
        `;
        
        notification.innerHTML = `
            <div style="font-weight: bold; margin-bottom: 5px;">
                ${this.getSeverityIcon(alert.severity)} Security Alert
            </div>
            <div style="font-size: 14px;">
                ${alert.message}
            </div>
            <div style="margin-top: 10px;">
                <button onclick="this.parentElement.parentElement.remove()" 
                        style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white; padding: 5px 10px; border-radius: 3px; cursor: pointer;">
                    Dismiss
                </button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // ‡∏•‡∏ö notification ‡∏´‡∏•‡∏±‡∏á 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
            if (document.body.contains(notification)) {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }
        }, 10000);
    }
    
    async performScan() {
        console.log('üîç Starting security scan...');
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
        this.updateStatusDisplay({
            status: 'scanning',
            message: 'Performing security scan...'
        });
        
        try {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Python script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
            const result = await this.executeCommand('python github_security_system.py --scan');
            console.log('Scan completed:', result);
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            setTimeout(() => {
                this.checkSecurityStatus();
                this.checkAlerts();
            }, 2000);
            
        } catch (error) {
            console.error('Scan failed:', error);
            this.updateStatusDisplay({
                status: 'error',
                message: 'Scan failed'
            });
        }
    }
    
    async viewAlerts() {
        try {
            const response = await this.readFile(this.alertsFile);
            if (response) {
                const alerts = JSON.parse(response);
                this.showAlertsModal(alerts);
            } else {
                alert('No alerts found');
            }
        } catch (error) {
            alert('Error loading alerts: ' + error.message);
        }
    }
    
    showAlertsModal(alerts) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            z-index: 20000;
            display: flex;
            justify-content: center;
            align-items: center;
        `;
        
        modal.innerHTML = `
            <div style="background: white; padding: 20px; border-radius: 8px; max-width: 80%; max-height: 80%; overflow-y: auto;">
                <h3 style="margin: 0 0 15px 0;">üö® Security Alerts</h3>
                <div style="max-height: 400px; overflow-y: auto;">
                    ${alerts.map(alert => `
                        <div style="padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;">
                            <div style="font-weight: bold;">
                                ${this.getSeverityIcon(alert.severity)} ${alert.message}
                            </div>
                            <div style="font-size: 12px; color: #666; margin: 5px 0;">
                                ${new Date(alert.timestamp * 1000).toLocaleString()}
                            </div>
                            <div style="font-size: 12px;">
                                File: ${alert.file}
                            </div>
                        </div>
                    `).join('')}
                </div>
                <button onclick="this.parentElement.parentElement.remove()" 
                        style="margin-top: 15px; padding: 8px 15px; background: #0984e3; color: white; border: none; border-radius: 3px; cursor: pointer;">
                    Close
                </button>
            </div>
        `;
        
        document.body.appendChild(modal);
    }
    
    async generateReport() {
        console.log('üìä Generating security report...');
        
        try {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Python script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            const result = await this.executeCommand('python github_security_system.py --report');
            console.log('Report generated:', result);
            
            alert('Security report generated successfully!\\nCheck security_report.md file.');
            
        } catch (error) {
            console.error('Report generation failed:', error);
            alert('Failed to generate report: ' + error.message);
        }
    }
    
    setupEventListeners() {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            // Ctrl+Shift+S = Security Scan
            if (e.ctrlKey && e.shiftKey && e.key === 'S') {
                e.preventDefault();
                this.performScan();
            }
            
            // Ctrl+Shift+A = View Alerts
            if (e.ctrlKey && e.shiftKey && e.key === 'A') {
                e.preventDefault();
                this.viewAlerts();
            }
        });
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ file change detection
        if (window.cursor && window.cursor.workspace) {
            window.cursor.workspace.onDidChangeTextDocument((event) => {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                const fileName = event.document.fileName;
                if (fileName.includes('.env') || fileName.includes('config') || fileName.includes('secret')) {
                    console.log('üîç Sensitive file changed, triggering security check...');
                    setTimeout(() => this.performScan(), 1000);
                }
            });
        }
    }
    
    // Utility methods
    async readFile(filename) {
        if (window.cursor && window.cursor.fs) {
            return await window.cursor.fs.readFile(filename);
        } else {
            // Fallback for testing
            return localStorage.getItem(filename);
        }
    }
    
    async executeCommand(command) {
        if (window.cursor && window.cursor.terminal) {
            return await window.cursor.terminal.execute(command);
        } else {
            // Fallback
            console.log('Executing command:', command);
            return 'Command executed (simulated)';
        }
    }
}

// CSS Animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
    
    #security-panel button:hover {
        opacity: 0.8;
        transform: translateY(-1px);
    }
    
    #security-panel {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
`;
document.head.appendChild(style);

// Initialize extension
const securityExt = new CursorSecurityExtension();

// Global functions for buttons
window.securityExt = securityExt;

console.log('üîí Cursor Security Extension loaded successfully');
'''
        
        extension_file = extension_dir / "security.js"
        
        try:
            with open(extension_file, 'w', encoding='utf-8') as f:
                f.write(extension_script)
            
            self.logger.info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Cursor security extension ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á extension: {e}")
    
    def create_deployment_security_config(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deployment ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        config_content = '''# Deployment Security Configuration

## Environment Variables (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô platform secrets)
OPENAI_API_KEY=your_openai_key_here
GITHUB_TOKEN=your_github_token_here
SECRET_KEY=your_secret_key_here
ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

## Vercel Configuration (vercel.json)
{
  "env": {
    "OPENAI_API_KEY": "@openai_api_key",
    "SECRET_KEY": "@secret_key"
  },
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "Strict-Transport-Security",
          "value": "max-age=31536000; includeSubDomains"
        }
      ]
    }
  ]
}

## Netlify Configuration (_headers)
/*
  X-Content-Type-Options: nosniff
  X-Frame-Options: DENY
  X-XSS-Protection: 1; mode=block
  Strict-Transport-Security: max-age=31536000; includeSubDomains
  Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'

## Cloudflare Workers Configuration
export default {
  async fetch(request, env) {
    const response = await handleRequest(request, env);
    
    // Security headers
    response.headers.set('X-Content-Type-Options', 'nosniff');
    response.headers.set('X-Frame-Options', 'DENY');
    response.headers.set('X-XSS-Protection', '1; mode=block');
    
    return response;
  }
}

## Docker Security (Dockerfile)
FROM node:18-alpine
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001
USER nextjs
COPY --chown=nextjs:nodejs . .
EXPOSE 3000
CMD ["npm", "start"]

## GitHub Actions Security
name: Deploy with Security
on:
  push:
    branches: [main]
jobs:
  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Security Scan
        run: |
          npm audit --audit-level high
          npx snyk test
  deploy:
    needs: security-check
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel --prod
'''
        
        config_file = self.workspace_path / "deployment_security_config.md"
        
        try:
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(config_content)
            
            self.logger.info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå deployment security config ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            return str(config_file)
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á deployment config: {e}")
            return ""
    
    def stop_monitoring(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        self.is_monitoring = False
        self.update_security_status("stopped", "Security monitoring stopped")
        self.logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")

# CLI Interface
def main():
    print("üîí Cursor Security Integration - ‡∏ü‡∏£‡∏µ 100%")
    print("=" * 60)
    
    # ‡∏£‡∏±‡∏ö workspace path
    workspace = input("üìÅ ‡πÉ‡∏™‡πà path ‡∏Ç‡∏≠‡∏á Cursor workspace (‡∏´‡∏£‡∏∑‡∏≠ Enter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö current directory): ").strip()
    if not workspace:
        workspace = os.getcwd()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö integration
    integration = CursorSecurityIntegration(workspace)
    
    print("\n‚úÖ Cursor Security Integration ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    print("\nüéØ Features:")
    print("- üëÄ Real-time file monitoring")
    print("- üö® Instant security alerts")
    print("- üõë Auto-block dangerous commits")
    print("- üìä Security dashboard in Cursor")
    print("- üîç On-demand security scans")
    
    print("\nüìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print("1. ‡πÄ‡∏õ‡∏¥‡∏î Cursor AI")
    print("2. ‡∏î‡∏π Security Monitor panel")
    print("3. ‡πÉ‡∏ä‡πâ Ctrl+Shift+S ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô")
    print("4. ‡πÉ‡∏ä‡πâ Ctrl+Shift+A ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
    
    try:
        while True:
            print("\nüõ°Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
            print("1. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
            print("2. ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
            print("3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
            print("4. ‡∏™‡∏£‡πâ‡∏≤‡∏á deployment security config")
            print("5. ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
            print("6. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
            
            choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-6): ").strip()
            
            if choice == "1":
                results = integration.perform_security_scan()
                print(f"‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏û‡∏ö {len(results['issues_found'])} ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
                
            elif choice == "2":
                if integration.security_alerts_file.exists():
                    with open(integration.security_alerts_file, 'r', encoding='utf-8') as f:
                        alerts = json.load(f)
                    
                    print(f"\nüì¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ({len(alerts)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):")
                    for alert in alerts[-5:]:  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                        timestamp = time.strftime('%H:%M:%S', time.localtime(alert['timestamp']))
                        print(f"  {timestamp} - {alert['severity'].upper()}: {alert['message']}")
                else:
                    print("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
                    
            elif choice == "3":
                report_file = integration.security_system.generate_security_report()
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {report_file}")
                
            elif choice == "4":
                config_file = integration.create_deployment_security_config()
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á deployment config: {config_file}")
                
            elif choice == "5":
                integration.stop_monitoring()
                print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß")
                
            elif choice == "6":
                integration.stop_monitoring()
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
                break
                
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-6")
                
    except KeyboardInterrupt:
        integration.stop_monitoring()
        print("\n\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")

if __name__ == "__main__":
    main()

