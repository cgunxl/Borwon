#!/usr/bin/env python3
"""
Web Scraper Bot - ‡∏ü‡∏£‡∏µ 100%
‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
"""

import requests
import time
import json
import re
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from typing import Dict, List, Optional
import random
import urllib.parse

class WebScraperBot:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        self.free_code_sources = {
            'codepen': {
                'base_url': 'https://codepen.io',
                'search_url': 'https://codepen.io/search/pens?q={}',
                'api_url': 'https://cpv2api.com/search/pens?q={}&limit=10'
            },
            'jsfiddle': {
                'base_url': 'https://jsfiddle.net',
                'search_url': 'https://jsfiddle.net/search/?q={}'
            },
            'codesandbox': {
                'base_url': 'https://codesandbox.io',
                'search_url': 'https://codesandbox.io/search?query={}&page=1&configure%5BhitsPerPage%5D=12'
            },
            'stackblitz': {
                'base_url': 'https://stackblitz.com',
                'search_url': 'https://stackblitz.com/search?q={}'
            },
            'github': {
                'base_url': 'https://github.com',
                'search_url': 'https://github.com/search?q={}&type=repositories'
            },
            'replit': {
                'base_url': 'https://replit.com',
                'search_url': 'https://replit.com/search?q={}'
            }
        }
        
        self.ai_code_generators = {
            'huggingface': {
                'api_url': 'https://api-inference.huggingface.co/models/microsoft/DialoGPT-large',
                'headers': {'Authorization': 'Bearer hf_demo_token'}
            },
            'openai_compatible': {
                'api_url': 'https://api.openai.com/v1/chat/completions',
                'model': 'gpt-3.5-turbo'
            }
        }
        
    def setup_selenium_driver(self, headless=True):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Selenium WebDriver"""
        chrome_options = Options()
        if headless:
            chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        
        try:
            driver = webdriver.Chrome(options=chrome_options)
            return driver
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Chrome driver: {e}")
            return None
    
    def search_codepen(self, query: str, limit: int = 5) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô CodePen"""
        print(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô CodePen: {query}")
        
        try:
            # ‡πÉ‡∏ä‡πâ CodePen API (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠ scraping
            search_url = self.free_code_sources['codepen']['search_url'].format(urllib.parse.quote(query))
            
            response = self.session.get(search_url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                
                pens = []
                pen_items = soup.find_all('div', class_='single-pen')[:limit]
                
                for item in pen_items:
                    try:
                        title_elem = item.find('h3', class_='pen-title')
                        link_elem = item.find('a')
                        
                        if title_elem and link_elem:
                            pen_url = 'https://codepen.io' + link_elem.get('href')
                            pen_data = self.extract_codepen_code(pen_url)
                            
                            if pen_data:
                                pens.append({
                                    'title': title_elem.get_text().strip(),
                                    'url': pen_url,
                                    'source': 'codepen',
                                    'code': pen_data
                                })
                                
                    except Exception as e:
                        print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pen: {e}")
                        continue
                
                return pens
                
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ CodePen: {e}")
            
        return []
    
    def extract_codepen_code(self, pen_url: str) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å CodePen"""
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á URL ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ
            if '/pen/' in pen_url:
                pen_id = pen_url.split('/pen/')[-1].split('?')[0]
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CodePen API (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô public)
                api_url = f"https://codepen.io/api/oembed?url={pen_url}&format=json"
                
                response = self.session.get(api_url)
                if response.status_code == 200:
                    data = response.json()
                    
                    # ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ pen
                    pen_response = self.session.get(pen_url)
                    if pen_response.status_code == 200:
                        soup = BeautifulSoup(pen_response.content, 'html.parser')
                        
                        # ‡∏î‡∏∂‡∏á HTML, CSS, JS ‡∏à‡∏≤‡∏Å meta tags ‡∏´‡∏£‡∏∑‡∏≠ script tags
                        html_code = self.extract_code_from_pen_page(soup, 'html')
                        css_code = self.extract_code_from_pen_page(soup, 'css')
                        js_code = self.extract_code_from_pen_page(soup, 'js')
                        
                        return {
                            'html': html_code,
                            'css': css_code,
                            'js': js_code,
                            'title': data.get('title', ''),
                            'author': data.get('author_name', '')
                        }
                        
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å CodePen: {e}")
            
        return None
    
    def extract_code_from_pen_page(self, soup: BeautifulSoup, code_type: str) -> str:
        """‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ CodePen"""
        try:
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô script tags ‡∏´‡∏£‡∏∑‡∏≠ data attributes
            script_tags = soup.find_all('script')
            
            for script in script_tags:
                if script.string and code_type in script.string.lower():
                    # ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å JSON data
                    if 'window.__pen' in script.string:
                        # Parse JSON data
                        json_match = re.search(r'window\.__pen\s*=\s*({.*?});', script.string, re.DOTALL)
                        if json_match:
                            try:
                                pen_data = json.loads(json_match.group(1))
                                return pen_data.get(code_type, '')
                            except:
                                pass
                                
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            return self.generate_sample_code(code_type)
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î {code_type}: {e}")
            return self.generate_sample_code(code_type)
    
    def search_github(self, query: str, limit: int = 5) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô GitHub"""
        print(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô GitHub: {query}")
        
        try:
            # ‡πÉ‡∏ä‡πâ GitHub Search API
            api_url = f"https://api.github.com/search/repositories?q={urllib.parse.quote(query)}&sort=stars&order=desc&per_page={limit}"
            
            response = self.session.get(api_url)
            if response.status_code == 200:
                data = response.json()
                
                repos = []
                for repo in data.get('items', []):
                    try:
                        repo_data = self.extract_github_code(repo)
                        if repo_data:
                            repos.append({
                                'title': repo['name'],
                                'url': repo['html_url'],
                                'source': 'github',
                                'code': repo_data,
                                'stars': repo['stargazers_count'],
                                'description': repo.get('description', '')
                            })
                    except Exception as e:
                        print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repo: {e}")
                        continue
                
                return repos
                
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ GitHub: {e}")
            
        return []
    
    def extract_github_code(self, repo: Dict) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å GitHub repository"""
        try:
            # ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å repo
            contents_url = f"https://api.github.com/repos/{repo['full_name']}/contents"
            
            response = self.session.get(contents_url)
            if response.status_code == 200:
                contents = response.json()
                
                code_files = {
                    'html': '',
                    'css': '',
                    'js': '',
                    'readme': ''
                }
                
                # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
                for file_info in contents:
                    if file_info['type'] == 'file':
                        filename = file_info['name'].lower()
                        
                        if filename.endswith('.html') or filename == 'index.html':
                            code_files['html'] = self.download_github_file(file_info['download_url'])
                        elif filename.endswith('.css') or filename == 'style.css':
                            code_files['css'] = self.download_github_file(file_info['download_url'])
                        elif filename.endswith('.js') or filename == 'script.js':
                            code_files['js'] = self.download_github_file(file_info['download_url'])
                        elif filename == 'readme.md':
                            code_files['readme'] = self.download_github_file(file_info['download_url'])
                
                return code_files
                
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å GitHub: {e}")
            
        return None
    
    def download_github_file(self, download_url: str) -> str:
        """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å GitHub"""
        try:
            response = self.session.get(download_url)
            if response.status_code == 200:
                return response.text
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")
            
        return ''
    
    def search_codesandbox(self, query: str, limit: int = 5) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô CodeSandbox"""
        print(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô CodeSandbox: {query}")
        
        try:
            # ‡πÉ‡∏ä‡πâ Selenium ‡πÄ‡∏û‡∏∑‡πà‡∏≠ scrape CodeSandbox
            driver = self.setup_selenium_driver()
            if not driver:
                return []
                
            search_url = self.free_code_sources['codesandbox']['search_url'].format(urllib.parse.quote(query))
            driver.get(search_url)
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, '[data-testid="sandbox-item"]'))
            )
            
            sandboxes = []
            sandbox_elements = driver.find_elements(By.CSS_SELECTOR, '[data-testid="sandbox-item"]')[:limit]
            
            for element in sandbox_elements:
                try:
                    title_elem = element.find_element(By.CSS_SELECTOR, 'h3')
                    link_elem = element.find_element(By.CSS_SELECTOR, 'a')
                    
                    if title_elem and link_elem:
                        sandbox_url = link_elem.get_attribute('href')
                        sandbox_data = self.extract_codesandbox_code(sandbox_url, driver)
                        
                        if sandbox_data:
                            sandboxes.append({
                                'title': title_elem.text.strip(),
                                'url': sandbox_url,
                                'source': 'codesandbox',
                                'code': sandbox_data
                            })
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sandbox: {e}")
                    continue
            
            driver.quit()
            return sandboxes
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ CodeSandbox: {e}")
            
        return []
    
    def extract_codesandbox_code(self, sandbox_url: str, driver) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å CodeSandbox"""
        try:
            # ‡πÄ‡∏õ‡∏¥‡∏î sandbox
            driver.get(sandbox_url)
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î
            time.sleep(3)
            
            # ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å editor (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô public)
            code_data = {
                'html': self.extract_codesandbox_file_content(driver, 'html'),
                'css': self.extract_codesandbox_file_content(driver, 'css'),
                'js': self.extract_codesandbox_file_content(driver, 'js')
            }
            
            return code_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å CodeSandbox: {e}")
            
        return None
    
    def extract_codesandbox_file_content(self, driver, file_type: str) -> str:
        """‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å CodeSandbox editor"""
        try:
            # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            file_selectors = {
                'html': ['index.html', 'public/index.html'],
                'css': ['style.css', 'styles.css', 'src/style.css'],
                'js': ['index.js', 'src/index.js', 'script.js']
            }
            
            for filename in file_selectors.get(file_type, []):
                try:
                    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô file explorer
                    file_element = driver.find_element(By.XPATH, f"//span[contains(text(), '{filename}')]")
                    file_element.click()
                    
                    time.sleep(1)
                    
                    # ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å editor
                    editor_element = driver.find_element(By.CSS_SELECTOR, '.monaco-editor textarea')
                    content = driver.execute_script("return arguments[0].value;", editor_element)
                    
                    if content:
                        return content
                        
                except:
                    continue
                    
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            return self.generate_sample_code(file_type)
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå {file_type}: {e}")
            return self.generate_sample_code(file_type)
    
    def generate_ai_code(self, prompt: str, code_type: str = 'html') -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI"""
        print(f"ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î {code_type} ‡∏î‡πâ‡∏ß‡∏¢ AI: {prompt}")
        
        try:
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Hugging Face API
            api_url = self.ai_code_generators['huggingface']['api_url']
            headers = self.ai_code_generators['huggingface']['headers']
            
            code_prompt = f"Generate {code_type} code for: {prompt}"
            
            payload = {
                "inputs": code_prompt,
                "parameters": {
                    "max_length": 1000,
                    "temperature": 0.7
                }
            }
            
            response = self.session.post(api_url, headers=headers, json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if isinstance(result, list) and len(result) > 0:
                    generated_text = result[0].get('generated_text', '')
                    
                    # ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
                    code = self.extract_code_from_ai_response(generated_text, code_type)
                    return code
                    
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI: {e}")
        
        # ‡∏ñ‡πâ‡∏≤ AI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        return self.generate_sample_code(code_type, prompt)
    
    def extract_code_from_ai_response(self, response_text: str, code_type: str) -> str:
        """‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á AI"""
        try:
            # ‡∏´‡∏≤ code blocks
            code_patterns = {
                'html': r'```html\s*(.*?)\s*```',
                'css': r'```css\s*(.*?)\s*```',
                'js': r'```javascript\s*(.*?)\s*```'
            }
            
            pattern = code_patterns.get(code_type, r'```\s*(.*?)\s*```')
            match = re.search(pattern, response_text, re.DOTALL | re.IGNORECASE)
            
            if match:
                return match.group(1).strip()
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ code block ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                return response_text.strip()
                
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å AI: {e}")
            return self.generate_sample_code(code_type)
    
    def generate_sample_code(self, code_type: str, prompt: str = '') -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        templates = {
            'html': f'''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{prompt or 'Smart AI Project'}</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header>
        <h1>{prompt or 'Smart AI Project'}</h1>
    </header>
    
    <main>
        <section class="hero">
            <h2>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Smart AI Automation</h2>
            <p>‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ü‡∏£‡∏µ 100%</p>
            <button class="cta-button">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</button>
        </section>
        
        <section class="features">
            <div class="feature">
                <h3>‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á</h3>
                <p>‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>
            </div>
            <div class="feature">
                <h3>Responsive</h3>
                <p>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</p>
            </div>
            <div class="feature">
                <h3>Modern</h3>
                <p>‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</p>
            </div>
        </section>
    </main>
    
    <footer>
        <p>&copy; 2024 Smart AI Automation. ‡∏ü‡∏£‡∏µ 100%</p>
    </footer>
    
    <script src="script.js"></script>
</body>
</html>''',
            
            'css': '''/* Smart AI Generated CSS */
:root {
    --primary-color: #3498db;
    --secondary-color: #2c3e50;
    --accent-color: #e74c3c;
    --text-color: #333;
    --bg-color: #f8f9fa;
    --white: #ffffff;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--bg-color);
}

header {
    background: var(--primary-color);
    color: var(--white);
    text-align: center;
    padding: 2rem 0;
}

.hero {
    text-align: center;
    padding: 4rem 2rem;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: var(--white);
}

.hero h2 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

.cta-button {
    background: var(--accent-color);
    color: var(--white);
    border: none;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.cta-button:hover {
    background: #c0392b;
    transform: translateY(-2px);
}

.features {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    padding: 4rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.feature {
    background: var(--white);
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    text-align: center;
    transition: transform 0.3s ease;
}

.feature:hover {
    transform: translateY(-5px);
}

footer {
    background: var(--secondary-color);
    color: var(--white);
    text-align: center;
    padding: 2rem 0;
}

@media (max-width: 768px) {
    .hero h2 {
        font-size: 2rem;
    }
    
    .features {
        grid-template-columns: 1fr;
        padding: 2rem 1rem;
    }
}''',
            
            'js': '''// Smart AI Generated JavaScript
class SmartAIProject {
    constructor() {
        this.init();
        this.setupEventListeners();
    }
    
    init() {
        console.log('üöÄ Smart AI Project initialized');
        this.animateElements();
    }
    
    setupEventListeners() {
        const ctaButton = document.querySelector('.cta-button');
        if (ctaButton) {
            ctaButton.addEventListener('click', this.handleCTAClick.bind(this));
        }
        
        // Smooth scrolling
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth'
                    });
                }
            });
        });
    }
    
    handleCTAClick(e) {
        e.preventDefault();
        this.showNotification('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!', 'success');
        
        // Add your custom logic here
        console.log('CTA button clicked');
    }
    
    animateElements() {
        // Intersection Observer for animations
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        });
        
        document.querySelectorAll('.feature').forEach(feature => {
            feature.style.opacity = '0';
            feature.style.transform = 'translateY(20px)';
            feature.style.transition = 'all 0.6s ease';
            observer.observe(feature);
        });
    }
    
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 2rem;
            background: ${type === 'success' ? '#27ae60' : '#3498db'};
            color: white;
            border-radius: 5px;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    new SmartAIProject();
});

// Performance optimization
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                console.log('SW registered: ', registration);
            })
            .catch(registrationError => {
                console.log('SW registration failed: ', registrationError);
            });
    });
}'''
        }
        
        return templates.get(code_type, f'// Generated {code_type} code for: {prompt}')
    
    def scrape_multiple_sources(self, query: str, sources: List[str] = None) -> Dict:
        """‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
        if sources is None:
            sources = ['codepen', 'github', 'ai_generation']
        
        print(f"üåê ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á: {', '.join(sources)}")
        
        all_results = {}
        
        for source in sources:
            try:
                if source == 'codepen':
                    results = self.search_codepen(query)
                elif source == 'github':
                    results = self.search_github(query)
                elif source == 'codesandbox':
                    results = self.search_codesandbox(query)
                elif source == 'ai_generation':
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI
                    results = [{
                        'title': f'AI Generated: {query}',
                        'url': 'ai://generated',
                        'source': 'ai',
                        'code': {
                            'html': self.generate_ai_code(query, 'html'),
                            'css': self.generate_ai_code(query, 'css'),
                            'js': self.generate_ai_code(query, 'js')
                        }
                    }]
                else:
                    results = []
                
                all_results[source] = results
                print(f"‚úÖ {source}: {len(results)} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å rate limit
                time.sleep(random.uniform(1, 3))
                
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å {source}: {e}")
                all_results[source] = []
        
        return all_results
    
    def select_best_code(self, all_results: Dict) -> Dict:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á"""
        print("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...")
        
        best_code = {
            'html': '',
            'css': '',
            'js': '',
            'metadata': {
                'sources_used': [],
                'total_results': 0
            }
        }
        
        # ‡∏ô‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        total_results = sum(len(results) for results in all_results.values())
        best_code['metadata']['total_results'] = total_results
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        for code_type in ['html', 'css', 'js']:
            best_score = 0
            best_source = None
            
            for source, results in all_results.items():
                for result in results:
                    if 'code' in result and code_type in result['code']:
                        code = result['code'][code_type]
                        score = self.calculate_code_quality_score(code, code_type)
                        
                        if score > best_score:
                            best_score = score
                            best_code[code_type] = code
                            best_source = source
            
            if best_source:
                best_code['metadata']['sources_used'].append(f"{code_type}: {best_source}")
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡πÉ‡∏î‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        for code_type in ['html', 'css', 'js']:
            if not best_code[code_type]:
                best_code[code_type] = self.generate_sample_code(code_type)
                best_code['metadata']['sources_used'].append(f"{code_type}: generated")
        
        print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏à‡∏≤‡∏Å: {', '.join(best_code['metadata']['sources_used'])}")
        return best_code
    
    def calculate_code_quality_score(self, code: str, code_type: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡πâ‡∏î"""
        if not code:
            return 0.0
        
        score = 0.0
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÇ‡∏Ñ‡πâ‡∏î (‡πÑ‡∏°‡πà‡∏™‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
        length = len(code)
        if 100 <= length <= 5000:
            score += 20
        elif length > 50:
            score += 10
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö syntax ‡∏ó‡∏µ‡πà‡∏î‡∏µ
        quality_indicators = {
            'html': ['<!DOCTYPE', 'meta', 'viewport', 'charset'],
            'css': [':', '{', '}', 'px', 'rem', 'var('],
            'js': ['function', 'const', 'let', 'addEventListener', '=>']
        }
        
        indicators = quality_indicators.get(code_type, [])
        for indicator in indicators:
            if indicator in code:
                score += 10
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö best practices
        if code_type == 'html':
            if 'semantic' in code.lower() or any(tag in code for tag in ['<header>', '<main>', '<footer>', '<section>']):
                score += 15
        elif code_type == 'css':
            if 'responsive' in code.lower() or '@media' in code:
                score += 15
        elif code_type == 'js':
            if 'addEventListener' in code or 'querySelector' in code:
                score += 15
        
        return min(score, 100.0)

# CLI Interface
def main():
    print("ü§ñ Web Scraper Bot - ‡∏ü‡∏£‡∏µ 100%")
    print("=" * 50)
    
    bot = WebScraperBot()
    
    while True:
        try:
            query = input("\nüîç ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏´‡∏£‡∏∑‡∏≠ 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å): ").strip()
            
            if query.lower() in ['exit', 'quit', '‡∏≠‡∏≠‡∏Å']:
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
                break
            
            if not query:
                continue
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            print("\nüìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:")
            print("1. CodePen")
            print("2. GitHub")
            print("3. CodeSandbox")
            print("4. AI Generation")
            print("5. ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-5): ").strip()
            
            sources_map = {
                '1': ['codepen'],
                '2': ['github'],
                '3': ['codesandbox'],
                '4': ['ai_generation'],
                '5': ['codepen', 'github', 'ai_generation']
            }
            
            sources = sources_map.get(choice, ['ai_generation'])
            
            # ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
            print(f"\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {query}")
            all_results = bot.scrape_multiple_sources(query, sources)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_code = bot.select_best_code(all_results)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            print(f"\n‚úÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            print(f"üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {best_code['metadata']['total_results']}")
            print(f"üéØ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {', '.join(best_code['metadata']['sources_used'])}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            save = input("\nüíæ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").strip().lower()
            if save in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
                project_name = query.replace(' ', '_').lower()
                
                with open(f"{project_name}.html", 'w', encoding='utf-8') as f:
                    f.write(best_code['html'])
                
                with open(f"{project_name}_style.css", 'w', encoding='utf-8') as f:
                    f.write(best_code['css'])
                
                with open(f"{project_name}_script.js", 'w', encoding='utf-8') as f:
                    f.write(best_code['js'])
                
                print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {project_name}.html, {project_name}_style.css, {project_name}_script.js")
            
        except KeyboardInterrupt:
            print("\n\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            break
        except Exception as e:
            print(f"\nüí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

if __name__ == "__main__":
    main()

