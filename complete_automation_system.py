#!/usr/bin/env python3
"""
Complete Automation System - ‡∏ü‡∏£‡∏µ 100%
‡∏£‡∏∞‡∏ö‡∏ö automation ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°:
- Smart AI Automation
- Web Scraper Bot  
- GitHub Security System
- Cursor Integration
- GitHub Pages Deployment
"""

import os
import sys
import json
import time
import subprocess
from pathlib import Path
from typing import Dict, List, Optional

# Import ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
from smart_ai_automation_system import SmartAIAutomation
from web_scraper_bot import WebScraperBot
from github_security_system import GitHubSecuritySystem
from cursor_integration_plugin import CursorAIPlugin
from cursor_security_integration import CursorSecurityIntegration

class CompleteAutomationSystem:
    def __init__(self, workspace_path: str = None):
        self.workspace_path = Path(workspace_path) if workspace_path else Path.cwd()
        self.config_file = self.workspace_path / ".automation_config.json"
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.ai_automation = SmartAIAutomation()
        self.web_scraper = WebScraperBot()
        self.security_system = GitHubSecuritySystem(str(self.workspace_path))
        self.cursor_plugin = CursorAIPlugin()
        self.security_integration = CursorSecurityIntegration(str(self.workspace_path))
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        self.is_running = False
        self.projects_created = 0
        self.security_scans_performed = 0
        
        print("üöÄ Complete Automation System - ‡∏ü‡∏£‡∏µ 100%")
        print("=" * 60)
        
        self.init_system()
    
    def init_system(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("‚öôÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö automation...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        (self.workspace_path / "projects").mkdir(exist_ok=True)
        (self.workspace_path / "logs").mkdir(exist_ok=True)
        (self.workspace_path / "reports").mkdir(exist_ok=True)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cursor integration
        self.cursor_plugin.setup_cursor_integration(str(self.workspace_path))
        
        # ‡πÇ‡∏´‡∏•‡∏î config
        self.load_config()
        
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    
    def load_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        default_config = {
            "version": "1.0",
            "auto_security_scan": True,
            "auto_deploy": True,
            "github_pages_enabled": True,
            "notification_enabled": True,
            "max_projects_per_day": 10,
            "security_level": "high",
            "preferred_sources": ["github", "codepen", "ai_generation"],
            "deployment_platform": "github_pages"
        }
        
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    self.config = json.load(f)
            except:
                self.config = default_config
        else:
            self.config = default_config
            self.save_config()
    
    def save_config(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config: {e}")
    
    def process_automation_request(self, prompt: str, options: Dict = None) -> Dict:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠ automation ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£"""
        print(f"\nüéØ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠: {prompt}")
        
        if options is None:
            options = {}
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        print("üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå...")
        expanded_prompt = self.ai_automation.expand_prompt(prompt)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå
        print("üîí ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...")
        security_check = self.check_prompt_security(expanded_prompt)
        
        if not security_check['safe']:
            return {
                'success': False,
                'error': f"Security violation: {security_check['reason']}",
                'prompt': prompt
            }
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
        print("üåê ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á...")
        sources = options.get('sources', self.config['preferred_sources'])
        scraped_results = self.web_scraper.scrape_multiple_sources(expanded_prompt['main_task'], sources)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        print("üéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...")
        best_code = self.web_scraper.select_best_code(scraped_results)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        print("‚ö° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û...")
        optimized_code = self.optimize_code(best_code, expanded_prompt)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        print("üìÅ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ...")
        project_result = self.create_project(optimized_code, expanded_prompt, options)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        if self.config['auto_security_scan']:
            print("üîç ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...")
            security_result = self.security_system.scan_project_for_secrets()
            project_result['security_scan'] = security_result
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 8: Deploy ‡πÑ‡∏õ GitHub Pages
        if self.config['auto_deploy'] and project_result['success']:
            print("üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 8: Deploy ‡πÑ‡∏õ GitHub Pages...")
            deployment_result = self.deploy_to_github_pages(project_result)
            project_result['deployment'] = deployment_result
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 9: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        print("üìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 9: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...")
        report = self.generate_project_report(project_result, expanded_prompt)
        project_result['report'] = report
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        if project_result['success']:
            self.projects_created += 1
        
        print("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        return project_result
    
    def check_prompt_security(self, expanded_prompt: Dict) -> Dict:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå"""
        dangerous_keywords = [
            'hack', 'crack', 'exploit', 'malware', 'virus',
            'ddos', 'phishing', 'spam', 'illegal', 'piracy'
        ]
        
        prompt_text = str(expanded_prompt).lower()
        
        for keyword in dangerous_keywords:
            if keyword in prompt_text:
                return {
                    'safe': False,
                    'reason': f"Contains dangerous keyword: {keyword}"
                }
        
        return {'safe': True, 'reason': 'Prompt is safe'}
    
    def optimize_code(self, code: Dict, expanded_prompt: Dict) -> Dict:
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡πâ‡∏î"""
        optimized = code.copy()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° meta tags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO
        if 'html' in optimized:
            html = optimized['html']
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° meta tags ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if '<meta name="description"' not in html:
                description = expanded_prompt.get('description', 'Created by Smart AI Automation')
                meta_description = f'<meta name="description" content="{description}">'
                html = html.replace('<head>', f'<head>\\n    {meta_description}')
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° viewport meta tag
            if '<meta name="viewport"' not in html:
                viewport_meta = '<meta name="viewport" content="width=device-width, initial-scale=1.0">'
                html = html.replace('<head>', f'<head>\\n    {viewport_meta}')
            
            optimized['html'] = html
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° responsive design ‡πÉ‡∏ô CSS
        if 'css' in optimized:
            css = optimized['css']
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° media queries ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if '@media' not in css:
                responsive_css = '''
/* Responsive Design */
@media (max-width: 768px) {
    body {
        font-size: 14px;
        padding: 10px;
    }
    
    .container {
        width: 100%;
        padding: 0 15px;
    }
    
    h1 {
        font-size: 1.8rem;
    }
    
    h2 {
        font-size: 1.5rem;
    }
}

@media (max-width: 480px) {
    body {
        font-size: 12px;
    }
    
    h1 {
        font-size: 1.5rem;
    }
}
'''
                css += responsive_css
            
            optimized['css'] = css
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° performance optimizations ‡πÉ‡∏ô JavaScript
        if 'js' in optimized:
            js = optimized['js']
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° lazy loading ‡πÅ‡∏•‡∏∞ performance optimizations
            performance_js = '''
// Performance Optimizations
document.addEventListener('DOMContentLoaded', function() {
    // Lazy loading images
    const images = document.querySelectorAll('img[data-src]');
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                imageObserver.unobserve(img);
            }
        });
    });
    
    images.forEach(img => imageObserver.observe(img));
    
    // Preload critical resources
    const criticalResources = ['style.css', 'script.js'];
    criticalResources.forEach(resource => {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.href = resource;
        link.as = resource.endsWith('.css') ? 'style' : 'script';
        document.head.appendChild(link);
    });
});
'''
            
            if 'DOMContentLoaded' not in js:
                js += performance_js
            
            optimized['js'] = js
        
        return optimized
    
    def create_project(self, code: Dict, expanded_prompt: Dict, options: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ"""
        project_name = expanded_prompt.get('project_name', f"project_{int(time.time())}")
        project_dir = self.workspace_path / "projects" / project_name
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
            project_dir.mkdir(parents=True, exist_ok=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå HTML
            html_file = project_dir / "index.html"
            with open(html_file, 'w', encoding='utf-8') as f:
                f.write(code.get('html', ''))
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSS
            css_file = project_dir / "style.css"
            with open(css_file, 'w', encoding='utf-8') as f:
                f.write(code.get('css', ''))
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JavaScript
            js_file = project_dir / "script.js"
            with open(js_file, 'w', encoding='utf-8') as f:
                f.write(code.get('js', ''))
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå README
            readme_content = f"""# {project_name}

## Description
{expanded_prompt.get('description', 'Project created by Smart AI Automation')}

## Features
{chr(10).join(f"- {feature}" for feature in expanded_prompt.get('features', ['Responsive design', 'Modern UI', 'Performance optimized']))}

## Technologies Used
- HTML5
- CSS3
- JavaScript (ES6+)

## Generated by
Smart AI Automation System - ‡∏ü‡∏£‡∏µ 100%

## Installation
1. Clone this repository
2. Open `index.html` in your browser
3. Enjoy!

## Live Demo
[View Live Demo](https://your-username.github.io/{project_name})

## License
MIT License
"""
            
            readme_file = project_dir / "README.md"
            with open(readme_file, 'w', encoding='utf-8') as f:
                f.write(readme_content)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå package.json (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node.js projects)
            package_json = {
                "name": project_name,
                "version": "1.0.0",
                "description": expanded_prompt.get('description', 'Project created by Smart AI Automation'),
                "main": "index.html",
                "scripts": {
                    "start": "python -m http.server 8000",
                    "build": "echo 'Build completed'",
                    "test": "echo 'No tests specified'"
                },
                "keywords": expanded_prompt.get('keywords', ['automation', 'ai', 'web']),
                "author": "Smart AI Automation",
                "license": "MIT"
            }
            
            package_file = project_dir / "package.json"
            with open(package_file, 'w', encoding='utf-8') as f:
                json.dump(package_json, f, indent=2, ensure_ascii=False)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            performance_score = self.calculate_performance_score(code)
            
            return {
                'success': True,
                'project_name': project_name,
                'project_path': str(project_dir),
                'files_created': [
                    str(html_file),
                    str(css_file),
                    str(js_file),
                    str(readme_file),
                    str(package_file)
                ],
                'performance_score': performance_score,
                'optimizations': [
                    'Responsive design added',
                    'SEO meta tags included',
                    'Performance optimizations applied',
                    'Lazy loading implemented'
                ]
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'project_name': project_name
            }
    
    def calculate_performance_score(self, code: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        score = 0.0
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML
        html = code.get('html', '')
        if html:
            score += 20
            if 'meta name="viewport"' in html:
                score += 10
            if 'meta name="description"' in html:
                score += 10
            if 'semantic' in html.lower() or any(tag in html for tag in ['<header>', '<main>', '<footer>']):
                score += 10
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CSS
        css = code.get('css', '')
        if css:
            score += 20
            if '@media' in css:
                score += 15
            if 'flexbox' in css.lower() or 'grid' in css.lower():
                score += 10
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JavaScript
        js = code.get('js', '')
        if js:
            score += 20
            if 'addEventListener' in js:
                score += 10
            if 'IntersectionObserver' in js:
                score += 5
        
        return min(score, 100.0)
    
    def deploy_to_github_pages(self, project_result: Dict) -> Dict:
        """Deploy ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏õ GitHub Pages"""
        if not project_result['success']:
            return {'success': False, 'error': 'Project creation failed'}
        
        project_path = Path(project_result['project_path'])
        project_name = project_result['project_name']
        
        try:
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
            os.chdir(project_path)
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Git repository
            subprocess.run(['git', 'init'], check=True, capture_output=True)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            subprocess.run(['git', 'add', '.'], check=True, capture_output=True)
            
            # Commit
            commit_message = f"Initial commit: {project_name} created by Smart AI Automation"
            subprocess.run(['git', 'commit', '-m', commit_message], check=True, capture_output=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub repository (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ GitHub CLI)
            try:
                subprocess.run(['gh', 'repo', 'create', project_name, '--public', '--source=.', '--remote=origin', '--push'], 
                             check=True, capture_output=True)
                
                # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô GitHub Pages
                subprocess.run(['gh', 'api', f'repos/:owner/{project_name}/pages', 
                              '-X', 'POST', '-f', 'source[branch]=main', '-f', 'source[path]=/'], 
                             check=True, capture_output=True)
                
                github_url = f"https://github.com/your-username/{project_name}"
                pages_url = f"https://your-username.github.io/{project_name}"
                
                return {
                    'success': True,
                    'github_url': github_url,
                    'pages_url': pages_url,
                    'deployment_time': time.time()
                }
                
            except subprocess.CalledProcessError:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ GitHub CLI ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå instructions
                instructions_file = project_path / "DEPLOYMENT_INSTRUCTIONS.md"
                instructions_content = f"""# Deployment Instructions for {project_name}

## Manual GitHub Deployment

1. Create a new repository on GitHub named `{project_name}`
2. Run these commands in your terminal:

```bash
git remote add origin https://github.com/YOUR_USERNAME/{project_name}.git
git branch -M main
git push -u origin main
```

3. Go to repository Settings ‚Üí Pages
4. Select "Deploy from a branch"
5. Choose "main" branch and "/ (root)" folder
6. Click Save

Your website will be available at: `https://YOUR_USERNAME.github.io/{project_name}`

## Alternative: Use GitHub CLI

If you have GitHub CLI installed:

```bash
gh repo create {project_name} --public --source=. --remote=origin --push
gh api repos/:owner/{project_name}/pages -X POST -f source[branch]=main -f source[path]=/
```

---
Generated by Smart AI Automation System
"""
                
                with open(instructions_file, 'w', encoding='utf-8') as f:
                    f.write(instructions_content)
                
                return {
                    'success': True,
                    'manual_deployment': True,
                    'instructions_file': str(instructions_file),
                    'message': 'Manual deployment instructions created'
                }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
        finally:
            # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°
            os.chdir(self.workspace_path)
    
    def generate_project_report(self, project_result: Dict, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"""
        report_content = f"""# Project Report: {project_result.get('project_name', 'Unknown')}

## üìä Project Summary
- **Created:** {time.strftime('%Y-%m-%d %H:%M:%S')}
- **Status:** {'‚úÖ Success' if project_result['success'] else '‚ùå Failed'}
- **Performance Score:** {project_result.get('performance_score', 0):.1f}/100

## üéØ Original Request
{expanded_prompt.get('original_prompt', 'N/A')}

## üìù Expanded Requirements
- **Main Task:** {expanded_prompt.get('main_task', 'N/A')}
- **Features:** {', '.join(expanded_prompt.get('features', []))}
- **Technologies:** {', '.join(expanded_prompt.get('technologies', []))}

## üìÅ Files Created
{chr(10).join(f"- {file}" for file in project_result.get('files_created', []))}

## ‚ö° Optimizations Applied
{chr(10).join(f"- {opt}" for opt in project_result.get('optimizations', []))}

## üîí Security Scan Results
"""
        
        if 'security_scan' in project_result:
            security = project_result['security_scan']
            report_content += f"""
- **Risk Level:** {security['risk_level'].upper()}
- **Issues Found:** {len(security['issues_found'])}
- **Files Scanned:** {security['total_files_scanned']}
"""
        else:
            report_content += "Security scan not performed"
        
        report_content += f"""
## üöÄ Deployment Status
"""
        
        if 'deployment' in project_result:
            deployment = project_result['deployment']
            if deployment['success']:
                if 'pages_url' in deployment:
                    report_content += f"""
- **Status:** ‚úÖ Deployed
- **GitHub URL:** {deployment.get('github_url', 'N/A')}
- **Live URL:** {deployment.get('pages_url', 'N/A')}
"""
                else:
                    report_content += f"""
- **Status:** üìã Manual deployment required
- **Instructions:** {deployment.get('instructions_file', 'N/A')}
"""
            else:
                report_content += f"""
- **Status:** ‚ùå Deployment failed
- **Error:** {deployment.get('error', 'Unknown error')}
"""
        else:
            report_content += "Deployment not attempted"
        
        report_content += f"""
## üìà Performance Metrics
- **Code Quality Score:** {project_result.get('performance_score', 0):.1f}/100
- **Responsive Design:** {'‚úÖ' if '@media' in str(project_result) else '‚ùå'}
- **SEO Optimized:** {'‚úÖ' if 'meta name="description"' in str(project_result) else '‚ùå'}
- **Performance Optimized:** {'‚úÖ' if 'IntersectionObserver' in str(project_result) else '‚ùå'}

## üõ†Ô∏è System Information
- **AI Automation Version:** 1.0
- **Sources Used:** {', '.join(expanded_prompt.get('sources_used', []))}
- **Processing Time:** {time.time() - expanded_prompt.get('start_time', time.time()):.2f} seconds

---
Generated by Complete Automation System - ‡∏ü‡∏£‡∏µ 100%
"""
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report_file = self.workspace_path / "reports" / f"{project_result.get('project_name', 'unknown')}_report.md"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(report_content)
            
            return str(report_file)
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {e}")
            return ""
    
    def start_cursor_integration(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Cursor integration"""
        print("üîó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Cursor integration...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor
        self.cursor_plugin.start_watching()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        self.security_integration.setup_file_watchers()
        
        self.is_running = True
        print("‚úÖ Cursor integration ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    
    def stop_system(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        
        if hasattr(self.cursor_plugin, 'stop_watching'):
            self.cursor_plugin.stop_watching()
        
        if hasattr(self.security_integration, 'stop_monitoring'):
            self.security_integration.stop_monitoring()
        
        self.is_running = False
        print("‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    
    def get_system_status(self) -> Dict:
        """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        return {
            'running': self.is_running,
            'projects_created': self.projects_created,
            'security_scans_performed': self.security_scans_performed,
            'workspace_path': str(self.workspace_path),
            'config': self.config
        }

# CLI Interface
def main():
    print("üöÄ Complete Automation System - ‡∏ü‡∏£‡∏µ 100%")
    print("=" * 60)
    print("‡∏£‡∏∞‡∏ö‡∏ö automation ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô")
    print()
    
    # ‡∏£‡∏±‡∏ö workspace path
    workspace = input("üìÅ ‡πÉ‡∏™‡πà path ‡∏Ç‡∏≠‡∏á workspace (‡∏´‡∏£‡∏∑‡∏≠ Enter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö current directory): ").strip()
    if not workspace:
        workspace = os.getcwd()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    system = CompleteAutomationSystem(workspace)
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Cursor integration
    system.start_cursor_integration()
    
    print("\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    print("\nüìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print("1. ‡πÄ‡∏õ‡∏¥‡∏î Cursor AI")
    print("2. ‡∏î‡∏π Smart AI panel ‡πÅ‡∏•‡∏∞ Security Monitor")
    print("3. ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤'")
    print("4. ‡∏Å‡∏î '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ' ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ CLI ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
    
    try:
        while True:
            print("\nüõ†Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
            print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà")
            print("2. ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
            print("3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")
            print("4. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ")
            print("5. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
            print("6. ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
            
            choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-6): ").strip()
            
            if choice == "1":
                prompt = input("üí≠ ‡πÉ‡∏™‡πà‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà: ").strip()
                if prompt:
                    print("\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ...")
                    result = system.process_automation_request(prompt)
                    
                    if result['success']:
                        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {result['project_name']}")
                        print(f"üìÅ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {result['project_path']}")
                        print(f"üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {result['performance_score']:.1f}/100")
                        
                        if 'deployment' in result and result['deployment']['success']:
                            if 'pages_url' in result['deployment']:
                                print(f"üåê URL: {result['deployment']['pages_url']}")
                            else:
                                print("üìã ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå DEPLOYMENT_INSTRUCTIONS.md ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ deploy")
                    else:
                        print(f"‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('error', 'Unknown error')}")
                
            elif choice == "2":
                status = system.get_system_status()
                print(f"\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:")
                print(f"- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {'‚úÖ' if status['running'] else '‚ùå'}")
                print(f"- ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: {status['projects_created']}")
                print(f"- ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: {status['security_scans_performed']}")
                print(f"- Workspace: {status['workspace_path']}")
                
            elif choice == "3":
                print("\n‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö:")
                print(f"1. Auto Security Scan: {system.config['auto_security_scan']}")
                print(f"2. Auto Deploy: {system.config['auto_deploy']}")
                print(f"3. Security Level: {system.config['security_level']}")
                print(f"4. Max Projects/Day: {system.config['max_projects_per_day']}")
                
                setting = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (1-4) ‡∏´‡∏£‡∏∑‡∏≠ Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°: ").strip()
                
                if setting == "1":
                    system.config['auto_security_scan'] = not system.config['auto_security_scan']
                    print(f"‚úÖ Auto Security Scan: {system.config['auto_security_scan']}")
                elif setting == "2":
                    system.config['auto_deploy'] = not system.config['auto_deploy']
                    print(f"‚úÖ Auto Deploy: {system.config['auto_deploy']}")
                elif setting == "3":
                    levels = ['low', 'medium', 'high']
                    current_index = levels.index(system.config['security_level'])
                    new_index = (current_index + 1) % len(levels)
                    system.config['security_level'] = levels[new_index]
                    print(f"‚úÖ Security Level: {system.config['security_level']}")
                elif setting == "4":
                    try:
                        new_limit = int(input("‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô: "))
                        system.config['max_projects_per_day'] = new_limit
                        print(f"‚úÖ Max Projects/Day: {new_limit}")
                    except ValueError:
                        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
                
                if setting in ['1', '2', '3', '4']:
                    system.save_config()
                
            elif choice == "4":
                reports_dir = system.workspace_path / "reports"
                if reports_dir.exists():
                    reports = list(reports_dir.glob("*.md"))
                    if reports:
                        print(f"\nüìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ({len(reports)} ‡πÑ‡∏ü‡∏•‡πå):")
                        for i, report in enumerate(reports[-5:], 1):  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                            print(f"{i}. {report.name}")
                        
                        try:
                            choice_report = int(input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π (‡∏´‡∏£‡∏∑‡∏≠ 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°): "))
                            if 1 <= choice_report <= len(reports[-5:]):
                                selected_report = reports[-5:][choice_report - 1]
                                with open(selected_report, 'r', encoding='utf-8') as f:
                                    print(f"\nüìÑ {selected_report.name}:")
                                    print("=" * 50)
                                    print(f.read()[:1000] + "..." if len(f.read()) > 1000 else f.read())
                        except ValueError:
                            pass
                    else:
                        print("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ")
                else:
                    print("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
                
            elif choice == "5":
                print("\nüîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...")
                security_result = system.security_system.scan_project_for_secrets()
                system.security_scans_performed += 1
                
                print(f"‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:")
                print(f"- ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô: {security_result['total_files_scanned']}")
                print(f"- ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö: {len(security_result['issues_found'])}")
                print(f"- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {security_result['risk_level'].upper()}")
                
                if security_result['issues_found']:
                    print("\nüö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
                    for issue in security_result['issues_found'][:3]:  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                        print(f"  - {issue['file']} (‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î {issue['line']})")
                
            elif choice == "6":
                system.stop_system()
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Complete Automation System!")
                break
                
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-6")
                
    except KeyboardInterrupt:
        system.stop_system()
        print("\n\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")

if __name__ == "__main__":
    main()

