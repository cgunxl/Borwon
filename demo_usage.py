#!/usr/bin/env python3
"""
Demo ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Advanced Cursor AI System
‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
"""

import sys
import time
import json
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.append(str(Path(__file__).parent))

from advanced_cursor_ai_complete import AdvancedCursorAI

def print_header(title: str):
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏ß‡∏¢‡πÜ"""
    print("\n" + "=" * 60)
    print(f"üöÄ {title}")
    print("=" * 60)

def print_step(step: str):
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô"""
    print(f"\nüìã {step}")
    print("-" * 40)

def demo_basic_usage():
    """Demo ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print_header("Demo ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    print_step("1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    ai_system = AdvancedCursorAI("demo_workspace")
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö Advanced Cursor AI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
    print_step("2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ")
    query = "React JavaScript framework"
    print(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {query}")
    
    knowledge_results = ai_system.search_global_knowledge(query, max_sources=2)
    print(f"‚úÖ ‡∏û‡∏ö {len(knowledge_results.get('results', []))} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
    print(f"‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {knowledge_results.get('search_time', 0):.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    for i, result in enumerate(knowledge_results.get('results', [])[:2], 1):
        print(f"   {i}. {result.get('source', 'unknown')}: {result.get('title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠')}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
    print_step("3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ")
    prompt = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå React ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß"
    print(f"üíª ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {prompt}")
    
    script_result = ai_system.generate_script_from_knowledge(prompt, knowledge_results)
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ID: {script_result.get('project_id', '‡πÑ‡∏°‡πà‡∏°‡∏µ')}")
    print(f"üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {script_result.get('project_type', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ deploy
    print_step("4. Deploy ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ")
    project_data = ai_system._get_latest_project_data()
    if project_data:
        deploy_success = ai_system.deploy_to_github(project_data)
        if deploy_success:
            print("‚úÖ Deploy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            project_dir = Path("demo_workspace/projects") / project_data['name'].replace(' ', '_').lower()
            print(f"üìÅ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà: {project_dir}")
        else:
            print("‚ùå Deploy ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    print_step("5. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    stats = ai_system.get_stats()
    for key, value in stats.items():
        print(f"üìä {key}: {value}")
    
    return ai_system

def demo_command_simulation():
    """Demo ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor"""
    print_header("Demo ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor")
    
    ai_system = AdvancedCursorAI("demo_cursor_workspace")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    commands = [
        {
            "prompt": "‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
            "action": "create"
        },
        {
            "prompt": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå portfolio",
            "action": "create"
        },
        {
            "prompt": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Twitter",
            "action": "create"
        }
    ]
    
    for i, command in enumerate(commands, 1):
        print_step(f"{i}. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {command['prompt']}")
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        with open(ai_system.command_file, 'w', encoding='utf-8') as f:
            json.dump(command, f, indent=2, ensure_ascii=False)
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        print("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ...")
        knowledge_results = ai_system.search_global_knowledge(command['prompt'], max_sources=1)
        
        print("üõ†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î...")
        script_result = ai_system.generate_script_from_knowledge(command['prompt'], knowledge_results)
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ID: {script_result.get('project_id', '‡πÑ‡∏°‡πà‡∏°‡∏µ')}")
        print(f"üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {script_result.get('project_type', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        time.sleep(1)
    
    return ai_system

def demo_different_project_types():
    """Demo ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    print_header("Demo ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ")
    
    ai_system = AdvancedCursorAI("demo_projects_workspace")
    
    project_examples = [
        {
            "prompt": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
            "type": "website",
            "description": "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"
        },
        {
            "prompt": "‡∏™‡∏£‡πâ‡∏≤‡∏á REST API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            "type": "api",
            "description": "API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CRUD operations"
        },
        {
            "prompt": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå backup ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            "type": "automation",
            "description": "‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
        }
    ]
    
    for i, project in enumerate(project_examples, 1):
        print_step(f"{i}. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {project['type'].upper()}")
        print(f"üìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {project['prompt']}")
        print(f"üìñ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {project['description']}")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
        knowledge_results = ai_system.search_global_knowledge(project['prompt'], max_sources=1)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
        script_result = ai_system.generate_script_from_knowledge(project['prompt'], knowledge_results)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à - Project ID: {script_result.get('project_id', '‡πÑ‡∏°‡πà‡∏°‡∏µ')}")
        
        # Deploy
        project_data = ai_system._get_latest_project_data()
        if project_data:
            deploy_success = ai_system.deploy_to_github(project_data)
            print(f"üöÄ Deploy: {'‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if deploy_success else '‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}")
        
        time.sleep(1)
    
    return ai_system

def demo_cursor_integration():
    """Demo ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Cursor"""
    print_header("Demo ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Cursor")
    
    ai_system = AdvancedCursorAI("demo_integration_workspace")
    
    print_step("1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
    print("üì° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    ai_system.create_example_files()
    
    print_step("2. ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
    print(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {ai_system.command_file}")
    print(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: {ai_system.response_file}")
    print(f"üìä ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ: {ai_system.knowledge_db}")
    print(f"üìä ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {ai_system.projects_db}")
    
    print_step("3. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    print("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print("   1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå .cursor_commands.json")
    print("   2. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    print("   3. ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô .cursor_responses.json")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    if ai_system.command_file.exists():
        with open(ai_system.command_file, 'r', encoding='utf-8') as f:
            command_content = f.read()
        print(f"\nüìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:")
        print(command_content)
    
    return ai_system

def demo_performance_test():
    """Demo ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    print_header("Demo ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
    
    ai_system = AdvancedCursorAI("demo_performance_workspace")
    
    test_queries = [
        "Python web development",
        "JavaScript React framework",
        "Node.js Express server",
        "HTML CSS responsive design",
        "Database MySQL queries"
    ]
    
    print_step("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    total_time = 0
    total_results = 0
    
    for i, query in enumerate(test_queries, 1):
        print(f"\n{i}. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {query}")
        
        start_time = time.time()
        results = ai_system.search_global_knowledge(query, max_sources=1)
        end_time = time.time()
        
        search_time = end_time - start_time
        result_count = len(results.get('results', []))
        
        print(f"   ‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤: {search_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        print(f"   üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        total_time += search_time
        total_results += result_count
    
    print_step("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    avg_time = total_time / len(test_queries)
    avg_results = total_results / len(test_queries)
    
    print(f"üìä ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ/‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    print(f"üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_results:.1f} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    print(f"üìä ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°: {total_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print(f"üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°: {total_results} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    return ai_system

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üé¨ Advanced Cursor AI System - Demo ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    print("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: Advanced Cursor AI Team")
    print("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 2024")
    
    demos = [
        ("‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô", demo_basic_usage),
        ("‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor", demo_command_simulation),
        ("‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ", demo_different_project_types),
        ("‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Cursor", demo_cursor_integration),
        ("‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û", demo_performance_test)
    ]
    
    print("\nüéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Demo ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:")
    for i, (name, _) in enumerate(demos, 1):
        print(f"   {i}. {name}")
    print("   0. ‡∏£‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    try:
        choice = input("\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-5): ").strip()
        
        if choice == "0":
            # ‡∏£‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for name, demo_func in demos:
                print(f"\nüé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏° Demo: {name}")
                demo_func()
                input("\n‚è∏Ô∏è ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Demo ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...")
        elif choice in ["1", "2", "3", "4", "5"]:
            # ‡∏£‡∏±‡∏ô Demo ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            index = int(choice) - 1
            name, demo_func = demos[index]
            print(f"\nüé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏° Demo: {name}")
            demo_func()
        else:
            print("‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return
        
        print("\nüéâ Demo ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: python3 advanced_cursor_ai_complete.py")
        
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î Demo")
    except Exception as e:
        print(f"\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

if __name__ == "__main__":
    main()

