#!/usr/bin/env python3
"""
Smart AI Automation System - ‡∏ü‡∏£‡∏µ 100%
‡∏£‡∏∞‡∏ö‡∏ö AI Bot ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡πá‡∏ö ‚Üí Deploy GitHub Pages
"""

import os
import json
import time
import requests
import subprocess
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import sqlite3
import hashlib

class SmartAIAutomation:
    def __init__(self):
        self.learning_db = "ai_learning.db"
        self.performance_log = "performance.json"
        self.web_sources = {
            'replit': 'https://replit.com',
            'codesandbox': 'https://codesandbox.io',
            'codepen': 'https://codepen.io',
            'jsfiddle': 'https://jsfiddle.net',
            'stackblitz': 'https://stackblitz.com'
        }
        self.free_ai_apis = {
            'huggingface': 'https://api-inference.huggingface.co',
            'gemini': 'https://generativelanguage.googleapis.com',
            'claude': 'https://api.anthropic.com'
        }
        self.init_learning_system()
    
    def init_learning_system(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"""
        conn = sqlite3.connect(self.learning_db)
        cursor = conn.cursor()
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS learning_history (
                id INTEGER PRIMARY KEY,
                prompt_hash TEXT,
                original_prompt TEXT,
                expanded_prompt TEXT,
                code_sources TEXT,
                performance_score REAL,
                resource_usage REAL,
                success_rate REAL,
                timestamp TEXT
            )
        ''')
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö patterns ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS learned_patterns (
                id INTEGER PRIMARY KEY,
                pattern_type TEXT,
                pattern_data TEXT,
                usage_count INTEGER,
                success_rate REAL,
                last_used TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def expand_prompt(self, short_prompt: str) -> Dict:
        """‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î + ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
        print(f"ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå: {short_prompt}")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        learned_context = self.get_learned_context(short_prompt)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô
        task_type = self.analyze_task_type(short_prompt)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        expanded = {
            'original': short_prompt,
            'task_type': task_type,
            'detailed_prompt': self.generate_detailed_prompt(short_prompt, learned_context),
            'recommended_sources': self.recommend_sources(task_type),
            'optimization_hints': self.get_optimization_hints(task_type),
            'estimated_resources': self.estimate_resources(task_type)
        }
        
        return expanded
    
    def analyze_task_type(self, prompt: str) -> str:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô"""
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ['website', '‡πÄ‡∏ß‡πá‡∏ö', 'html', 'css']):
            return 'website'
        elif any(word in prompt_lower for word in ['app', '‡πÅ‡∏≠‡∏õ', 'application']):
            return 'application'
        elif any(word in prompt_lower for word in ['api', 'backend', 'server']):
            return 'backend'
        elif any(word in prompt_lower for word in ['ui', 'interface', 'design']):
            return 'frontend'
        elif any(word in prompt_lower for word in ['bot', 'automation', 'script']):
            return 'automation'
        else:
            return 'general'
    
    def generate_detailed_prompt(self, short_prompt: str, learned_context: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"""
        base_template = f"""
## üéØ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
{short_prompt}

## üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏≤‡∏¢
{self.expand_requirements(short_prompt)}

## üîß ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
{self.generate_tech_requirements(short_prompt)}

## ‚ö° ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
{self.generate_performance_requirements()}

## üß™ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
{self.generate_testing_requirements()}

## üì± Responsive Design
{self.generate_responsive_requirements()}

## üöÄ Deployment
- Deploy ‡πÑ‡∏õ GitHub Pages ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡πÉ‡∏ä‡πâ GitHub Actions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI/CD
- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á SEO ‡πÅ‡∏•‡∏∞ performance

## üß† ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
{learned_context.get('suggestions', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤')}
"""
        return base_template
    
    def expand_requirements(self, prompt: str) -> str:
        """‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        task_type = self.analyze_task_type(prompt)
        
        expansions = {
            'website': """
- ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML structure ‡∏ó‡∏µ‡πà semantic
- ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö CSS ‡∏ó‡∏µ‡πà responsive ‡πÅ‡∏•‡∏∞ modern
- ‡πÄ‡∏û‡∏¥‡πà‡∏° JavaScript ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö interactivity
- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á accessibility (WCAG 2.1)
- ‡πÄ‡∏û‡∏¥‡πà‡∏° meta tags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO
- ‡πÉ‡∏ä‡πâ modern CSS features (Grid, Flexbox, CSS Variables)
""",
            'application': """
- ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö architecture ‡∏ó‡∏µ‡πà scalable
- ‡∏™‡∏£‡πâ‡∏≤‡∏á user interface ‡∏ó‡∏µ‡πà intuitive
- ‡πÄ‡∏û‡∏¥‡πà‡∏° error handling ‡πÅ‡∏•‡∏∞ validation
- ‡πÉ‡∏ä‡πâ modern frameworks ‡πÅ‡∏•‡∏∞ libraries
- ‡πÄ‡∏û‡∏¥‡πà‡∏° offline capabilities
- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á performance ‡πÅ‡∏•‡∏∞ loading speed
""",
            'backend': """
- ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö RESTful API
- ‡πÄ‡∏û‡∏¥‡πà‡∏° authentication ‡πÅ‡∏•‡∏∞ authorization
- ‡πÉ‡∏ä‡πâ database ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- ‡πÄ‡∏û‡∏¥‡πà‡∏° caching mechanisms
- ‡πÉ‡∏ä‡πâ proper error handling
- ‡πÄ‡∏û‡∏¥‡πà‡∏° logging ‡πÅ‡∏•‡∏∞ monitoring
""",
            'frontend': """
- ‡∏™‡∏£‡πâ‡∏≤‡∏á component-based architecture
- ‡πÉ‡∏ä‡πâ state management ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- ‡πÄ‡∏û‡∏¥‡πà‡∏° animations ‡πÅ‡∏•‡∏∞ transitions
- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á user experience
- ‡πÉ‡∏ä‡πâ modern build tools
- ‡πÄ‡∏û‡∏¥‡πà‡∏° progressive web app features
"""
        }
        
        return expansions.get(task_type, "- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞")
    
    def generate_tech_requirements(self, prompt: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ"""
        return """
- ‡πÉ‡∏ä‡πâ vanilla JavaScript ‡∏´‡∏£‡∏∑‡∏≠ modern frameworks
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö browsers ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß (Chrome, Firefox, Safari, Edge)
- ‡πÉ‡∏ä‡πâ CSS Grid ‡πÅ‡∏•‡∏∞ Flexbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö layout
- ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS Variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö theming
- ‡πÉ‡∏ä‡πâ semantic HTML elements
- ‡πÄ‡∏û‡∏¥‡πà‡∏° ARIA attributes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö accessibility
- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Core Web Vitals
- ‡πÉ‡∏ä‡πâ lazy loading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö images
"""
    
    def generate_performance_requirements(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        return """
- Page load time < 3 seconds
- Lighthouse performance score > 90
- First Contentful Paint < 1.5s
- Largest Contentful Paint < 2.5s
- Cumulative Layout Shift < 0.1
- ‡πÉ‡∏ä‡πâ image optimization
- Minify CSS ‡πÅ‡∏•‡∏∞ JavaScript
- ‡πÉ‡∏ä‡πâ compression (gzip/brotli)
"""
    
    def generate_testing_requirements(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        return """
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô devices ‡∏ï‡πà‡∏≤‡∏á‡πÜ (mobile, tablet, desktop)
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö cross-browser compatibility
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö accessibility ‡∏î‡πâ‡∏ß‡∏¢ screen readers
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö performance ‡∏î‡πâ‡∏ß‡∏¢ Lighthouse
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö responsive design
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö form validation
"""
    
    def generate_responsive_requirements(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î responsive design"""
        return """
- Mobile-first approach
- Breakpoints: 320px, 768px, 1024px, 1440px
- Flexible grid system
- Scalable typography
- Touch-friendly interface
- Optimized images ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö different screen densities
"""
    
    def get_learned_context(self, prompt: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
        conn = sqlite3.connect(self.learning_db)
        cursor = conn.cursor()
        
        # ‡∏´‡∏≤ patterns ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
        prompt_hash = hashlib.md5(prompt.encode()).hexdigest()
        cursor.execute('''
            SELECT * FROM learning_history 
            WHERE prompt_hash LIKE ? OR original_prompt LIKE ?
            ORDER BY performance_score DESC, timestamp DESC
            LIMIT 5
        ''', (f'%{prompt_hash[:8]}%', f'%{prompt}%'))
        
        similar_cases = cursor.fetchall()
        conn.close()
        
        if similar_cases:
            suggestions = "‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤:\n"
            for case in similar_cases:
                suggestions += f"- ‡πÉ‡∏ä‡πâ {case[4]} ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏î‡∏µ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {case[5]:.2f})\n"
            return {'suggestions': suggestions}
        
        return {'suggestions': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤'}
    
    def recommend_sources(self, task_type: str) -> List[str]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏´‡∏•‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô"""
        recommendations = {
            'website': ['codepen', 'codesandbox', 'stackblitz'],
            'application': ['replit', 'codesandbox', 'stackblitz'],
            'backend': ['replit', 'codesandbox'],
            'frontend': ['codepen', 'jsfiddle', 'stackblitz'],
            'automation': ['replit', 'codesandbox']
        }
        return recommendations.get(task_type, ['replit', 'codesandbox'])
    
    def get_optimization_hints(self, task_type: str) -> List[str]:
        """‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"""
        hints = {
            'website': [
                '‡πÉ‡∏ä‡πâ CSS Grid ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö layout ‡∏´‡∏•‡∏±‡∏Å',
                '‡πÉ‡∏ä‡πâ CSS Variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö theming',
                '‡πÄ‡∏û‡∏¥‡πà‡∏° lazy loading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö images',
                '‡πÉ‡∏ä‡πâ modern JavaScript features'
            ],
            'application': [
                '‡πÉ‡∏ä‡πâ component-based architecture',
                '‡πÄ‡∏û‡∏¥‡πà‡∏° state management',
                '‡πÉ‡∏ä‡πâ virtual DOM ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ',
                '‡πÄ‡∏û‡∏¥‡πà‡∏° offline capabilities'
            ]
        }
        return hints.get(task_type, ['‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'])
    
    def estimate_resources(self, task_type: str) -> Dict:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"""
        estimates = {
            'website': {'time': '5-15 ‡∏ô‡∏≤‡∏ó‡∏µ', 'complexity': '‡∏ï‡πà‡∏≥', 'resources': '‡∏ô‡πâ‡∏≠‡∏¢'},
            'application': {'time': '15-30 ‡∏ô‡∏≤‡∏ó‡∏µ', 'complexity': '‡∏Å‡∏•‡∏≤‡∏á', 'resources': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'},
            'backend': {'time': '20-40 ‡∏ô‡∏≤‡∏ó‡∏µ', 'complexity': '‡∏™‡∏π‡∏á', 'resources': '‡∏°‡∏≤‡∏Å'},
            'automation': {'time': '10-25 ‡∏ô‡∏≤‡∏ó‡∏µ', 'complexity': '‡∏Å‡∏•‡∏≤‡∏á', 'resources': '‡∏ô‡πâ‡∏≠‡∏¢'}
        }
        return estimates.get(task_type, {'time': '10-20 ‡∏ô‡∏≤‡∏ó‡∏µ', 'complexity': '‡∏Å‡∏•‡∏≤‡∏á', 'resources': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'})
    
    def display_for_approval(self, expanded_prompt: Dict) -> bool:
        """‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï"""
        print("\n" + "="*80)
        print("üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        print("="*80)
        print(f"üìù ‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°: {expanded_prompt['original']}")
        print(f"üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô: {expanded_prompt['task_type']}")
        print(f"‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {expanded_prompt['estimated_resources']['time']}")
        print(f"üåê ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {', '.join(expanded_prompt['recommended_sources'])}")
        print("\nüìã ‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:")
        print(expanded_prompt['detailed_prompt'])
        print("\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:")
        for hint in expanded_prompt['optimization_hints']:
            print(f"  - {hint}")
        print("\n" + "="*80)
        
        while True:
            response = input("‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ï‡∏Å‡∏•‡∏á' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á ‡∏´‡∏£‡∏∑‡∏≠ '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å': ").strip().lower()
            if response in ['‡∏ï‡∏Å‡∏•‡∏á', 'ok', 'yes', 'y']:
                return True
            elif response in ['‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', 'edit', 'modify']:
                return self.modify_prompt(expanded_prompt)
            elif response in ['‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 'cancel', 'no', 'n']:
                print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
                return False
            else:
                print("‚ùì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ï‡∏Å‡∏•‡∏á', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', ‡∏´‡∏£‡∏∑‡∏≠ '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'")
    
    def modify_prompt(self, expanded_prompt: Dict) -> bool:
        """‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå"""
        print("\nüîß ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå")
        print("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏™‡∏£‡πá‡∏à' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö):")
        
        modifications = []
        while True:
            mod = input("üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ").strip()
            if mod.lower() in ['‡πÄ‡∏™‡∏£‡πá‡∏à', 'done', 'finish']:
                break
            if mod:
                modifications.append(mod)
        
        if modifications:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå
            expanded_prompt['detailed_prompt'] += "\n\n## üîß ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n"
            for i, mod in enumerate(modifications, 1):
                expanded_prompt['detailed_prompt'] += f"{i}. {mod}\n"
            
            print("\n‚úÖ ‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß")
            return self.display_for_approval(expanded_prompt)
        
        return self.display_for_approval(expanded_prompt)
    
    def scrape_code_from_sources(self, expanded_prompt: Dict) -> Dict:
        """‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á"""
        print("üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á...")
        
        sources = expanded_prompt['recommended_sources']
        task_type = expanded_prompt['task_type']
        
        code_results = {}
        
        for source in sources:
            print(f"  üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å {source}...")
            try:
                code = self.get_code_from_source(source, expanded_prompt)
                if code:
                    code_results[source] = code
                    print(f"  ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å {source} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    print(f"  ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å {source} ‡πÑ‡∏î‡πâ")
            except Exception as e:
                print(f"  ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å {source}: {str(e)}")
        
        return code_results
    
    def get_code_from_source(self, source: str, expanded_prompt: Dict) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo - ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ web scraping ‡∏´‡∏£‡∏∑‡∏≠ API
        templates = {
            'website': {
                'html': self.generate_html_template(expanded_prompt),
                'css': self.generate_css_template(expanded_prompt),
                'js': self.generate_js_template(expanded_prompt)
            },
            'application': {
                'html': self.generate_app_html_template(expanded_prompt),
                'css': self.generate_app_css_template(expanded_prompt),
                'js': self.generate_app_js_template(expanded_prompt)
            }
        }
        
        task_type = expanded_prompt['task_type']
        return templates.get(task_type, templates['website'])
    
    def generate_html_template(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML template"""
        return f'''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{expanded_prompt['original']}</title>
    <link rel="stylesheet" href="style.css">
    <meta name="description" content="Generated by Smart AI Automation">
</head>
<body>
    <header>
        <nav>
            <div class="container">
                <h1>Smart AI Project</h1>
                <ul>
                    <li><a href="#home">‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a></li>
                    <li><a href="#about">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö</a></li>
                    <li><a href="#contact">‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</a></li>
                </ul>
            </div>
        </nav>
    </header>
    
    <main>
        <section id="home" class="hero">
            <div class="container">
                <h2>{expanded_prompt['original']}</h2>
                <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Smart AI Automation System</p>
                <button class="cta-button">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</button>
            </div>
        </section>
        
        <section id="features" class="features">
            <div class="container">
                <h3>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥</h3>
                <div class="feature-grid">
                    <div class="feature-card">
                        <h4>‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á</h4>
                        <p>‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>
                    </div>
                    <div class="feature-card">
                        <h4>Responsive Design</h4>
                        <p>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</p>
                    </div>
                    <div class="feature-card">
                        <h4>Modern Technology</h4>
                        <p>‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</p>
                    </div>
                </div>
            </div>
        </section>
    </main>
    
    <footer>
        <div class="container">
            <p>&copy; 2024 Smart AI Automation. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ü‡∏£‡∏µ 100%</p>
        </div>
    </footer>
    
    <script src="script.js"></script>
</body>
</html>'''
    
    def generate_css_template(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á CSS template"""
        return '''/* Smart AI Automation CSS */
:root {
    --primary-color: #3498db;
    --secondary-color: #2c3e50;
    --accent-color: #e74c3c;
    --text-color: #333;
    --bg-color: #f8f9fa;
    --white: #ffffff;
    --shadow: 0 2px 10px rgba(0,0,0,0.1);
    --border-radius: 8px;
    --transition: all 0.3s ease;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--bg-color);
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Header */
header {
    background: var(--white);
    box-shadow: var(--shadow);
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000;
}

nav {
    padding: 1rem 0;
}

nav .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

nav h1 {
    color: var(--primary-color);
    font-size: 1.5rem;
}

nav ul {
    display: flex;
    list-style: none;
    gap: 2rem;
}

nav a {
    text-decoration: none;
    color: var(--text-color);
    font-weight: 500;
    transition: var(--transition);
}

nav a:hover {
    color: var(--primary-color);
}

/* Main Content */
main {
    margin-top: 80px;
}

.hero {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: var(--white);
    padding: 4rem 0;
    text-align: center;
}

.hero h2 {
    font-size: 3rem;
    margin-bottom: 1rem;
}

.hero p {
    font-size: 1.2rem;
    margin-bottom: 2rem;
}

.cta-button {
    background: var(--accent-color);
    color: var(--white);
    border: none;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: var(--transition);
}

.cta-button:hover {
    background: #c0392b;
    transform: translateY(-2px);
}

/* Features */
.features {
    padding: 4rem 0;
}

.features h3 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: var(--secondary-color);
}

.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.feature-card {
    background: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    text-align: center;
    transition: var(--transition);
}

.feature-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 20px rgba(0,0,0,0.15);
}

.feature-card h4 {
    color: var(--primary-color);
    margin-bottom: 1rem;
    font-size: 1.3rem;
}

/* Footer */
footer {
    background: var(--secondary-color);
    color: var(--white);
    text-align: center;
    padding: 2rem 0;
}

/* Responsive Design */
@media (max-width: 768px) {
    nav .container {
        flex-direction: column;
        gap: 1rem;
    }
    
    nav ul {
        gap: 1rem;
    }
    
    .hero h2 {
        font-size: 2rem;
    }
    
    .feature-grid {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 480px) {
    .container {
        padding: 0 15px;
    }
    
    .hero {
        padding: 2rem 0;
    }
    
    .hero h2 {
        font-size: 1.5rem;
    }
}

/* Performance Optimizations */
img {
    max-width: 100%;
    height: auto;
    loading: lazy;
}

/* Accessibility */
:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
}

@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}'''
    
    def generate_js_template(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á JavaScript template"""
        return '''// Smart AI Automation JavaScript
class SmartAIApp {
    constructor() {
        this.init();
        this.setupEventListeners();
        this.optimizePerformance();
    }
    
    init() {
        console.log('üöÄ Smart AI App initialized');
        this.loadComponents();
        this.setupIntersectionObserver();
    }
    
    setupEventListeners() {
        // CTA Button
        const ctaButton = document.querySelector('.cta-button');
        if (ctaButton) {
            ctaButton.addEventListener('click', this.handleCTAClick.bind(this));
        }
        
        // Navigation
        const navLinks = document.querySelectorAll('nav a[href^="#"]');
        navLinks.forEach(link => {
            link.addEventListener('click', this.handleSmoothScroll.bind(this));
        });
        
        // Responsive navigation
        this.setupMobileNav();
    }
    
    handleCTAClick(e) {
        e.preventDefault();
        console.log('üéØ CTA clicked');
        
        // Add your custom logic here
        this.showNotification('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!', 'success');
    }
    
    handleSmoothScroll(e) {
        e.preventDefault();
        const targetId = e.target.getAttribute('href');
        const targetElement = document.querySelector(targetId);
        
        if (targetElement) {
            targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    }
    
    setupMobileNav() {
        // Add mobile navigation toggle if needed
        const nav = document.querySelector('nav ul');
        if (window.innerWidth <= 768) {
            nav.style.display = 'none';
            // Add mobile menu logic here
        }
    }
    
    setupIntersectionObserver() {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                }
            });
        }, observerOptions);
        
        // Observe feature cards
        const featureCards = document.querySelectorAll('.feature-card');
        featureCards.forEach(card => observer.observe(card));
    }
    
    loadComponents() {
        // Lazy load components
        this.loadImages();
        this.loadExternalResources();
    }
    
    loadImages() {
        const images = document.querySelectorAll('img[data-src]');
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.removeAttribute('data-src');
                    imageObserver.unobserve(img);
                }
            });
        });
        
        images.forEach(img => imageObserver.observe(img));
    }
    
    loadExternalResources() {
        // Load external resources only when needed
        const loadResource = (url, type = 'script') => {
            return new Promise((resolve, reject) => {
                const element = document.createElement(type === 'script' ? 'script' : 'link');
                
                if (type === 'script') {
                    element.src = url;
                    element.async = true;
                } else {
                    element.href = url;
                    element.rel = 'stylesheet';
                }
                
                element.onload = resolve;
                element.onerror = reject;
                
                document.head.appendChild(element);
            });
        };
        
        // Example: Load analytics only when user interacts
        document.addEventListener('click', () => {
            // loadResource('https://www.google-analytics.com/analytics.js');
        }, { once: true });
    }
    
    optimizePerformance() {
        // Debounce scroll events
        let scrollTimeout;
        window.addEventListener('scroll', () => {
            if (scrollTimeout) {
                clearTimeout(scrollTimeout);
            }
            scrollTimeout = setTimeout(() => {
                this.handleScroll();
            }, 16); // ~60fps
        }, { passive: true });
        
        // Optimize resize events
        let resizeTimeout;
        window.addEventListener('resize', () => {
            if (resizeTimeout) {
                clearTimeout(resizeTimeout);
            }
            resizeTimeout = setTimeout(() => {
                this.handleResize();
            }, 250);
        });
    }
    
    handleScroll() {
        // Add scroll-based animations or effects
        const scrollY = window.scrollY;
        const header = document.querySelector('header');
        
        if (scrollY > 100) {
            header.style.background = 'rgba(255, 255, 255, 0.95)';
            header.style.backdropFilter = 'blur(10px)';
        } else {
            header.style.background = 'var(--white)';
            header.style.backdropFilter = 'none';
        }
    }
    
    handleResize() {
        // Handle responsive behavior
        this.setupMobileNav();
    }
    
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // Style the notification
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '1rem 2rem',
            background: type === 'success' ? '#27ae60' : '#3498db',
            color: 'white',
            borderRadius: '8px',
            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
            zIndex: '10000',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease'
        });
        
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Remove after 3 seconds
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }
    
    // Utility methods
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
}

// Initialize app when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    new SmartAIApp();
});

// Service Worker for PWA capabilities
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                console.log('SW registered: ', registration);
            })
            .catch(registrationError => {
                console.log('SW registration failed: ', registrationError);
            });
    });
}'''
    
    def generate_app_html_template(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö application"""
        return f'''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{expanded_prompt['original']} - Smart AI App</title>
    <link rel="stylesheet" href="style.css">
    <meta name="description" content="Smart AI Application - {expanded_prompt['original']}">
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#3498db">
</head>
<body>
    <div id="app">
        <header class="app-header">
            <div class="container">
                <h1 class="app-title">{expanded_prompt['original']}</h1>
                <div class="app-controls">
                    <button id="theme-toggle" class="btn-icon" title="‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏°">üåô</button>
                    <button id="settings-btn" class="btn-icon" title="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤">‚öôÔ∏è</button>
                </div>
            </div>
        </header>
        
        <main class="app-main">
            <div class="container">
                <section class="dashboard">
                    <div class="dashboard-grid">
                        <div class="card">
                            <h3>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å</h3>
                            <p>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô</p>
                            <button class="btn-primary">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</button>
                        </div>
                        
                        <div class="card">
                            <h3>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</h3>
                            <div class="stats">
                                <div class="stat-item">
                                    <span class="stat-number">0</span>
                                    <span class="stat-label">‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card">
                            <h3>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h3>
                            <p>‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
                            <button class="btn-secondary">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</button>
                        </div>
                    </div>
                </section>
                
                <section class="features">
                    <h2>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥</h2>
                    <div class="feature-list">
                        <div class="feature-item">
                            <div class="feature-icon">üöÄ</div>
                            <div class="feature-content">
                                <h4>‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á</h4>
                                <p>‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>
                            </div>
                        </div>
                        
                        <div class="feature-item">
                            <div class="feature-icon">üì±</div>
                            <div class="feature-content">
                                <h4>Responsive</h4>
                                <p>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</p>
                            </div>
                        </div>
                        
                        <div class="feature-item">
                            <div class="feature-icon">üîí</div>
                            <div class="feature-content">
                                <h4>‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</h4>
                                <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </main>
        
        <footer class="app-footer">
            <div class="container">
                <p>&copy; 2024 Smart AI Application. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ü‡∏£‡∏µ 100%</p>
            </div>
        </footer>
    </div>
    
    <!-- Loading Spinner -->
    <div id="loading" class="loading-overlay">
        <div class="spinner"></div>
    </div>
    
    <!-- Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div id="modal-body"></div>
        </div>
    </div>
    
    <script src="script.js"></script>
</body>
</html>'''
    
    def generate_app_css_template(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á CSS template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö application"""
        return '''/* Smart AI Application CSS */
:root {
    --primary-color: #3498db;
    --secondary-color: #2c3e50;
    --accent-color: #e74c3c;
    --success-color: #27ae60;
    --warning-color: #f39c12;
    --text-color: #333;
    --text-light: #666;
    --bg-color: #f8f9fa;
    --bg-dark: #2c3e50;
    --white: #ffffff;
    --border-color: #e1e8ed;
    --shadow: 0 2px 10px rgba(0,0,0,0.1);
    --shadow-hover: 0 5px 20px rgba(0,0,0,0.15);
    --border-radius: 8px;
    --transition: all 0.3s ease;
    --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

[data-theme="dark"] {
    --text-color: #e1e8ed;
    --text-light: #8899a6;
    --bg-color: #15202b;
    --white: #192734;
    --border-color: #38444d;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: var(--font-family);
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--bg-color);
    transition: var(--transition);
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* App Layout */
#app {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Header */
.app-header {
    background: var(--white);
    border-bottom: 1px solid var(--border-color);
    padding: 1rem 0;
    position: sticky;
    top: 0;
    z-index: 100;
    backdrop-filter: blur(10px);
}

.app-header .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.app-title {
    color: var(--primary-color);
    font-size: 1.5rem;
    font-weight: 600;
}

.app-controls {
    display: flex;
    gap: 0.5rem;
}

.btn-icon {
    background: none;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 0.5rem;
    cursor: pointer;
    transition: var(--transition);
    font-size: 1rem;
}

.btn-icon:hover {
    background: var(--bg-color);
    transform: translateY(-1px);
}

/* Main Content */
.app-main {
    flex: 1;
    padding: 2rem 0;
}

/* Dashboard */
.dashboard {
    margin-bottom: 3rem;
}

.dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
}

/* Cards */
.card {
    background: var(--white);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow);
    transition: var(--transition);
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-hover);
}

.card h3 {
    color: var(--secondary-color);
    margin-bottom: 0.5rem;
    font-size: 1.2rem;
}

.card p {
    color: var(--text-light);
    margin-bottom: 1rem;
}

/* Buttons */
.btn-primary, .btn-secondary {
    border: none;
    border-radius: var(--border-radius);
    padding: 0.75rem 1.5rem;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: var(--transition);
    text-decoration: none;
    display: inline-block;
    text-align: center;
}

.btn-primary {
    background: var(--primary-color);
    color: var(--white);
}

.btn-primary:hover {
    background: #2980b9;
    transform: translateY(-1px);
}

.btn-secondary {
    background: transparent;
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
}

.btn-secondary:hover {
    background: var(--primary-color);
    color: var(--white);
}

/* Stats */
.stats {
    display: flex;
    gap: 1rem;
}

.stat-item {
    text-align: center;
}

.stat-number {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: var(--primary-color);
}

.stat-label {
    font-size: 0.8rem;
    color: var(--text-light);
}

/* Features */
.features h2 {
    color: var(--secondary-color);
    margin-bottom: 2rem;
    font-size: 2rem;
}

.feature-list {
    display: grid;
    gap: 1rem;
}

.feature-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: var(--white);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    transition: var(--transition);
}

.feature-item:hover {
    transform: translateX(5px);
    box-shadow: var(--shadow);
}

.feature-icon {
    font-size: 2rem;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--bg-color);
    border-radius: 50%;
}

.feature-content h4 {
    color: var(--secondary-color);
    margin-bottom: 0.25rem;
}

.feature-content p {
    color: var(--text-light);
    font-size: 0.9rem;
}

/* Footer */
.app-footer {
    background: var(--white);
    border-top: 1px solid var(--border-color);
    padding: 1.5rem 0;
    text-align: center;
    color: var(--text-light);
}

/* Loading */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

.spinner {
    width: 40px;
    height: 40px;
    border: 4px solid var(--border-color);
    border-top: 4px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Modal */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    backdrop-filter: blur(5px);
}

.modal-content {
    background-color: var(--white);
    margin: 5% auto;
    padding: 2rem;
    border-radius: var(--border-radius);
    width: 90%;
    max-width: 500px;
    position: relative;
    animation: modalSlideIn 0.3s ease;
}

@keyframes modalSlideIn {
    from {
        transform: translateY(-50px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.close {
    position: absolute;
    right: 1rem;
    top: 1rem;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-light);
}

.close:hover {
    color: var(--text-color);
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        padding: 0 15px;
    }
    
    .app-header .container {
        flex-direction: column;
        gap: 1rem;
    }
    
    .dashboard-grid {
        grid-template-columns: 1fr;
    }
    
    .feature-item {
        flex-direction: column;
        text-align: center;
    }
    
    .modal-content {
        margin: 10% auto;
        width: 95%;
    }
}

@media (max-width: 480px) {
    .app-main {
        padding: 1rem 0;
    }
    
    .card {
        padding: 1rem;
    }
    
    .features h2 {
        font-size: 1.5rem;
    }
}

/* Accessibility */
:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
}

@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}

/* Dark theme specific styles */
[data-theme="dark"] .card {
    border-color: var(--border-color);
}

[data-theme="dark"] .btn-icon {
    border-color: var(--border-color);
}

[data-theme="dark"] .btn-icon:hover {
    background: var(--bg-dark);
}

/* Utility classes */
.text-center { text-align: center; }
.text-left { text-align: left; }
.text-right { text-align: right; }
.mb-1 { margin-bottom: 0.5rem; }
.mb-2 { margin-bottom: 1rem; }
.mb-3 { margin-bottom: 1.5rem; }
.mt-1 { margin-top: 0.5rem; }
.mt-2 { margin-top: 1rem; }
.mt-3 { margin-top: 1.5rem; }'''
    
    def generate_app_js_template(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á JavaScript template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö application"""
        return '''// Smart AI Application JavaScript
class SmartAIApplication {
    constructor() {
        this.theme = localStorage.getItem('theme') || 'light';
        this.settings = JSON.parse(localStorage.getItem('settings')) || {};
        this.stats = JSON.parse(localStorage.getItem('stats')) || { usage: 0 };
        
        this.init();
        this.setupEventListeners();
        this.loadUserData();
        this.optimizePerformance();
    }
    
    init() {
        console.log('üöÄ Smart AI Application initialized');
        this.applyTheme();
        this.updateStats();
        this.setupServiceWorker();
        this.hideLoading();
    }
    
    setupEventListeners() {
        // Theme toggle
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', this.toggleTheme.bind(this));
        }
        
        // Settings button
        const settingsBtn = document.getElementById('settings-btn');
        if (settingsBtn) {
            settingsBtn.addEventListener('click', this.openSettings.bind(this));
        }
        
        // Primary buttons
        const primaryBtns = document.querySelectorAll('.btn-primary');
        primaryBtns.forEach(btn => {
            btn.addEventListener('click', this.handlePrimaryAction.bind(this));
        });
        
        // Secondary buttons
        const secondaryBtns = document.querySelectorAll('.btn-secondary');
        secondaryBtns.forEach(btn => {
            btn.addEventListener('click', this.handleSecondaryAction.bind(this));
        });
        
        // Modal close
        const closeBtn = document.querySelector('.close');
        if (closeBtn) {
            closeBtn.addEventListener('click', this.closeModal.bind(this));
        }
        
        // Click outside modal to close
        const modal = document.getElementById('modal');
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal();
                }
            });
        }
        
        // Keyboard shortcuts
        document.addEventListener('keydown', this.handleKeyboard.bind(this));
    }
    
    toggleTheme() {
        this.theme = this.theme === 'light' ? 'dark' : 'light';
        this.applyTheme();
        localStorage.setItem('theme', this.theme);
        
        // Update theme toggle icon
        const themeToggle = document.getElementById('theme-toggle');
        themeToggle.textContent = this.theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
        
        this.showNotification(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏µ‡∏° ${this.theme === 'light' ? '‡∏™‡∏ß‡πà‡∏≤‡∏á' : '‡∏°‡∏∑‡∏î'} ‡πÅ‡∏•‡πâ‡∏ß`, 'success');
    }
    
    applyTheme() {
        document.documentElement.setAttribute('data-theme', this.theme);
        
        // Update theme toggle icon
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.textContent = this.theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
        }
    }
    
    handlePrimaryAction(e) {
        e.preventDefault();
        this.showLoading();
        
        // Simulate primary action
        setTimeout(() => {
            this.hideLoading();
            this.incrementUsage();
            this.showNotification('‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
        }, 1500);
    }
    
    handleSecondaryAction(e) {
        e.preventDefault();
        const action = e.target.textContent.trim();
        
        if (action === '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤') {
            this.openSettings();
        } else {
            this.showNotification(`${action} ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß`, 'info');
        }
    }
    
    openSettings() {
        const modalBody = document.getElementById('modal-body');
        modalBody.innerHTML = `
            <h3>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h3>
            <div class="settings-form">
                <div class="setting-item">
                    <label>‡∏ò‡∏µ‡∏°:</label>
                    <select id="theme-select">
                        <option value="light" ${this.theme === 'light' ? 'selected' : ''}>‡∏™‡∏ß‡πà‡∏≤‡∏á</option>
                        <option value="dark" ${this.theme === 'dark' ? 'selected' : ''}>‡∏°‡∏∑‡∏î</option>
                    </select>
                </div>
                
                <div class="setting-item">
                    <label>‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</label>
                    <input type="checkbox" id="notifications" ${this.settings.notifications !== false ? 'checked' : ''}>
                </div>
                
                <div class="setting-item">
                    <label>‡∏†‡∏≤‡∏©‡∏≤:</label>
                    <select id="language-select">
                        <option value="th" selected>‡πÑ‡∏ó‡∏¢</option>
                        <option value="en">English</option>
                    </select>
                </div>
                
                <div class="setting-actions">
                    <button class="btn-primary" onclick="app.saveSettings()">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                    <button class="btn-secondary" onclick="app.resetSettings()">‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï</button>
                </div>
            </div>
            
            <style>
                .settings-form { margin-top: 1rem; }
                .setting-item { 
                    display: flex; 
                    justify-content: space-between; 
                    align-items: center; 
                    margin-bottom: 1rem; 
                    padding: 0.5rem 0;
                    border-bottom: 1px solid var(--border-color);
                }
                .setting-item:last-child { border-bottom: none; }
                .setting-actions { 
                    margin-top: 2rem; 
                    display: flex; 
                    gap: 1rem; 
                    justify-content: flex-end;
                }
                select, input[type="checkbox"] {
                    padding: 0.25rem;
                    border: 1px solid var(--border-color);
                    border-radius: 4px;
                }
            </style>
        `;
        
        this.showModal();
    }
    
    saveSettings() {
        const themeSelect = document.getElementById('theme-select');
        const notifications = document.getElementById('notifications');
        const language = document.getElementById('language-select');
        
        if (themeSelect.value !== this.theme) {
            this.theme = themeSelect.value;
            this.applyTheme();
            localStorage.setItem('theme', this.theme);
        }
        
        this.settings = {
            notifications: notifications.checked,
            language: language.value
        };
        
        localStorage.setItem('settings', JSON.stringify(this.settings));
        this.closeModal();
        this.showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß', 'success');
    }
    
    resetSettings() {
        if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            localStorage.removeItem('settings');
            localStorage.removeItem('theme');
            localStorage.removeItem('stats');
            
            this.theme = 'light';
            this.settings = {};
            this.stats = { usage: 0 };
            
            this.applyTheme();
            this.updateStats();
            this.closeModal();
            this.showNotification('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    }
    
    showModal() {
        const modal = document.getElementById('modal');
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
        
        // Focus trap
        const focusableElements = modal.querySelectorAll('button, input, select, textarea, [tabindex]:not([tabindex="-1"])');
        if (focusableElements.length > 0) {
            focusableElements[0].focus();
        }
    }
    
    closeModal() {
        const modal = document.getElementById('modal');
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
    
    showLoading() {
        const loading = document.getElementById('loading');
        loading.style.display = 'flex';
    }
    
    hideLoading() {
        const loading = document.getElementById('loading');
        loading.style.display = 'none';
    }
    
    incrementUsage() {
        this.stats.usage++;
        this.updateStats();
        localStorage.setItem('stats', JSON.stringify(this.stats));
    }
    
    updateStats() {
        const statNumber = document.querySelector('.stat-number');
        if (statNumber) {
            this.animateNumber(statNumber, 0, this.stats.usage, 1000);
        }
    }
    
    animateNumber(element, start, end, duration) {
        const startTime = performance.now();
        const animate = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const current = Math.floor(start + (end - start) * progress);
            
            element.textContent = current.toLocaleString();
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };
        requestAnimationFrame(animate);
    }
    
    loadUserData() {
        // Simulate loading user data
        console.log('üìä Loading user data...');
        
        // You can add actual data loading logic here
        setTimeout(() => {
            console.log('‚úÖ User data loaded');
        }, 500);
    }
    
    setupServiceWorker() {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js')
                .then(registration => {
                    console.log('SW registered: ', registration);
                })
                .catch(registrationError => {
                    console.log('SW registration failed: ', registrationError);
                });
        }
    }
    
    optimizePerformance() {
        // Lazy load images
        const images = document.querySelectorAll('img[data-src]');
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.removeAttribute('data-src');
                    imageObserver.unobserve(img);
                }
            });
        });
        
        images.forEach(img => imageObserver.observe(img));
        
        // Preload critical resources
        this.preloadCriticalResources();
        
        // Setup performance monitoring
        this.setupPerformanceMonitoring();
    }
    
    preloadCriticalResources() {
        const criticalResources = [
            // Add critical resources here
        ];
        
        criticalResources.forEach(resource => {
            const link = document.createElement('link');
            link.rel = 'preload';
            link.href = resource.url;
            link.as = resource.type;
            document.head.appendChild(link);
        });
    }
    
    setupPerformanceMonitoring() {
        // Monitor Core Web Vitals
        if ('web-vital' in window) {
            // This would require the web-vitals library
            // getCLS(console.log);
            // getFID(console.log);
            // getLCP(console.log);
        }
        
        // Monitor custom metrics
        window.addEventListener('load', () => {
            const loadTime = performance.now();
            console.log(`‚ö° App loaded in ${loadTime.toFixed(2)}ms`);
        });
    }
    
    handleKeyboard(e) {
        // Keyboard shortcuts
        if (e.ctrlKey || e.metaKey) {
            switch (e.key) {
                case 'k':
                    e.preventDefault();
                    this.openSettings();
                    break;
                case 'd':
                    e.preventDefault();
                    this.toggleTheme();
                    break;
            }
        }
        
        // Escape to close modal
        if (e.key === 'Escape') {
            this.closeModal();
        }
    }
    
    showNotification(message, type = 'info') {
        if (this.settings.notifications === false) return;
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        const colors = {
            success: '#27ae60',
            error: '#e74c3c',
            warning: '#f39c12',
            info: '#3498db'
        };
        
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '1rem 2rem',
            background: colors[type] || colors.info,
            color: 'white',
            borderRadius: '8px',
            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
            zIndex: '10000',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease',
            maxWidth: '300px',
            wordWrap: 'break-word'
        });
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
    
    // Utility methods
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
    
    // API methods (for future use)
    async apiCall(endpoint, options = {}) {
        try {
            const response = await fetch(endpoint, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.json();
        } catch (error) {
            console.error('API call failed:', error);
            this.showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'error');
            throw error;
        }
    }
}

// Initialize app
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new SmartAIApplication();
});

// Export for global access
window.app = app;'''
    
    def combine_and_optimize_code(self, code_results: Dict, expanded_prompt: Dict) -> Dict:
        """‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡πâ‡∏î...")
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á
        best_code = self.select_best_code(code_results)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        optimized_code = self.optimize_performance(best_code, expanded_prompt)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°
        enhanced_code = self.add_enhancements(optimized_code, expanded_prompt)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°
        additional_files = self.generate_additional_files(enhanced_code, expanded_prompt)
        
        final_result = {
            **enhanced_code,
            **additional_files,
            'metadata': {
                'generated_at': datetime.now().isoformat(),
                'sources_used': list(code_results.keys()),
                'optimizations_applied': self.get_applied_optimizations(),
                'performance_score': self.calculate_performance_score(enhanced_code)
            }
        }
        
        return final_result
    
    def select_best_code(self, code_results: Dict) -> Dict:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á"""
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo - ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡πâ‡∏î
        if code_results:
            return list(code_results.values())[0]
        
        return {
            'html': self.generate_html_template({'original': 'Default Project'}),
            'css': self.generate_css_template({'original': 'Default Project'}),
            'js': self.generate_js_template({'original': 'Default Project'})
        }
    
    def optimize_performance(self, code: Dict, expanded_prompt: Dict) -> Dict:
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡πâ‡∏î"""
        optimized = code.copy()
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á CSS
        if 'css' in optimized:
            optimized['css'] = self.optimize_css(optimized['css'])
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á JavaScript
        if 'js' in optimized:
            optimized['js'] = self.optimize_js(optimized['js'])
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á HTML
        if 'html' in optimized:
            optimized['html'] = self.optimize_html(optimized['html'])
        
        return optimized
    
    def optimize_css(self, css: str) -> str:
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á CSS"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS optimizations
        optimizations = """
/* Performance Optimizations */
* {
    will-change: auto;
}

img {
    content-visibility: auto;
    contain-intrinsic-size: 300px 200px;
}

.lazy-load {
    content-visibility: auto;
    contain-intrinsic-size: 1px 500px;
}

/* Critical CSS inlined */
@media (prefers-reduced-motion: reduce) {
    *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}
"""
        return css + optimizations
    
    def optimize_js(self, js: str) -> str:
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á JavaScript"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° performance optimizations
        optimizations = """
// Performance Optimizations
const performanceOptimizations = {
    // Intersection Observer for lazy loading
    setupLazyLoading() {
        const lazyElements = document.querySelectorAll('.lazy-load');
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('loaded');
                    observer.unobserve(entry.target);
                }
            });
        }, { rootMargin: '50px' });
        
        lazyElements.forEach(el => observer.observe(el));
    },
    
    // Resource hints
    preloadCriticalResources() {
        const criticalResources = [
            { href: '/critical.css', as: 'style' },
            { href: '/hero-image.jpg', as: 'image' }
        ];
        
        criticalResources.forEach(resource => {
            const link = document.createElement('link');
            link.rel = 'preload';
            link.href = resource.href;
            link.as = resource.as;
            document.head.appendChild(link);
        });
    },
    
    // Memory management
    cleanup() {
        // Remove event listeners
        // Clear intervals/timeouts
        // Cleanup observers
    }
};

// Initialize optimizations
document.addEventListener('DOMContentLoaded', () => {
    performanceOptimizations.setupLazyLoading();
    performanceOptimizations.preloadCriticalResources();
});

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
    performanceOptimizations.cleanup();
});
"""
        return js + optimizations
    
    def optimize_html(self, html: str) -> str:
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á HTML"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° meta tags ‡πÅ‡∏•‡∏∞ optimizations
        meta_optimizations = '''
    <!-- Performance & SEO Optimizations -->
    <meta name="robots" content="index, follow">
    <meta name="googlebot" content="index, follow">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    
    <!-- Critical CSS inlined -->
    <style>
        /* Critical above-the-fold CSS */
        body { margin: 0; font-family: system-ui, -apple-system, sans-serif; }
        .hero { min-height: 50vh; display: flex; align-items: center; }
    </style>
    
    <!-- Preload critical resources -->
    <link rel="preload" href="style.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="style.css"></noscript>
'''
        
        # ‡πÅ‡∏ó‡∏£‡∏Å‡∏Å‡πà‡∏≠‡∏ô </head>
        return html.replace('</head>', meta_optimizations + '</head>')
    
    def add_enhancements(self, code: Dict, expanded_prompt: Dict) -> Dict:
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°"""
        enhanced = code.copy()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° PWA capabilities
        enhanced['manifest'] = self.generate_manifest(expanded_prompt)
        enhanced['sw'] = self.generate_service_worker()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° SEO enhancements
        enhanced['sitemap'] = self.generate_sitemap(expanded_prompt)
        enhanced['robots'] = self.generate_robots_txt()
        
        return enhanced
    
    def generate_manifest(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á PWA manifest"""
        return json.dumps({
            "name": expanded_prompt['original'],
            "short_name": expanded_prompt['original'][:12],
            "description": f"Smart AI generated app: {expanded_prompt['original']}",
            "start_url": "/",
            "display": "standalone",
            "background_color": "#ffffff",
            "theme_color": "#3498db",
            "icons": [
                {
                    "src": "icon-192.png",
                    "sizes": "192x192",
                    "type": "image/png"
                },
                {
                    "src": "icon-512.png",
                    "sizes": "512x512",
                    "type": "image/png"
                }
            ]
        }, indent=2)
    
    def generate_service_worker(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Service Worker"""
        return '''// Smart AI Service Worker
const CACHE_NAME = 'smart-ai-v1';
const urlsToCache = [
    '/',
    '/style.css',
    '/script.js',
    '/manifest.json'
];

self.addEventListener('install', event => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => cache.addAll(urlsToCache))
    );
});

self.addEventListener('fetch', event => {
    event.respondWith(
        caches.match(event.request)
            .then(response => {
                if (response) {
                    return response;
                }
                return fetch(event.request);
            })
    );
});'''
    
    def generate_sitemap(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á sitemap.xml"""
        return '''<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    <url>
        <loc>https://your-domain.github.io/</loc>
        <lastmod>2024-01-01</lastmod>
        <changefreq>weekly</changefreq>
        <priority>1.0</priority>
    </url>
</urlset>'''
    
    def generate_robots_txt(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á robots.txt"""
        return '''User-agent: *
Allow: /

Sitemap: https://your-domain.github.io/sitemap.xml'''
    
    def generate_additional_files(self, code: Dict, expanded_prompt: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°"""
        return {
            'readme': self.generate_readme(expanded_prompt),
            'github_workflow': self.generate_github_workflow(),
            'package_json': self.generate_package_json(expanded_prompt)
        }
    
    def generate_readme(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á README.md"""
        return f'''# {expanded_prompt['original']}

‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Smart AI Automation System ‡∏ü‡∏£‡∏µ 100%

## ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥

- ‚ö° ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
- üì± Responsive Design
- üîí ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
- üöÄ PWA Ready
- üé® Modern UI/UX

## ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á

1. Clone repository
2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå index.html
3. ‡πÄ‡∏™‡∏£‡πá‡∏à!

## ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

## ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ

- HTML5
- CSS3 (Grid, Flexbox, Variables)
- Vanilla JavaScript
- PWA
- Service Worker

## ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û

- Lighthouse Score: 90+
- Core Web Vitals: ‡∏ú‡πà‡∏≤‡∏ô
- Accessibility: WCAG 2.1
- SEO: Optimized

## ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤

‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Smart AI Automation System
- ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏í‡∏ô‡∏≤: {expanded_prompt['estimated_resources']['time']}
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô: {expanded_prompt['estimated_resources']['complexity']}
- ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£: {expanded_prompt['estimated_resources']['resources']}

## License

MIT License - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏£‡∏µ
'''
    
    def generate_github_workflow(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub Actions workflow"""
        return '''name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build
      run: npm run build
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist'''
    
    def generate_package_json(self, expanded_prompt: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á package.json"""
        return json.dumps({
            "name": expanded_prompt['original'].lower().replace(' ', '-'),
            "version": "1.0.0",
            "description": f"Smart AI generated: {expanded_prompt['original']}",
            "main": "index.html",
            "scripts": {
                "start": "python -m http.server 8000",
                "build": "echo 'Build complete'",
                "test": "echo 'Tests passed'"
            },
            "keywords": ["smart-ai", "automation", "free"],
            "author": "Smart AI Automation",
            "license": "MIT"
        }, indent=2)
    
    def get_applied_optimizations(self) -> List[str]:
        """‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"""
        return [
            "CSS Grid ‡πÅ‡∏•‡∏∞ Flexbox layout",
            "CSS Variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö theming",
            "Lazy loading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö images",
            "Service Worker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö caching",
            "PWA manifest",
            "SEO meta tags",
            "Accessibility improvements",
            "Performance optimizations",
            "Responsive design",
            "Modern JavaScript features"
        ]
    
    def calculate_performance_score(self, code: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        score = 0.0
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML
        if 'html' in code:
            if 'meta name="viewport"' in code['html']:
                score += 10
            if 'preload' in code['html']:
                score += 10
            if 'manifest.json' in code['html']:
                score += 10
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CSS
        if 'css' in code:
            if 'grid' in code['css'].lower():
                score += 10
            if 'flexbox' in code['css'].lower():
                score += 10
            if 'var(' in code['css']:
                score += 10
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JavaScript
        if 'js' in code:
            if 'IntersectionObserver' in code['js']:
                score += 10
            if 'addEventListener' in code['js']:
                score += 10
            if 'performance' in code['js']:
                score += 10
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°
        if 'manifest' in code:
            score += 10
        
        return min(score, 100.0)
    
    def deploy_to_github_pages(self, final_code: Dict, expanded_prompt: Dict) -> Dict:
        """Deploy ‡πÑ‡∏õ GitHub Pages ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á deploy ‡πÑ‡∏õ GitHub Pages...")
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
            project_name = expanded_prompt['original'].lower().replace(' ', '-')
            project_dir = f"/tmp/{project_name}"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            self.create_project_files(project_dir, final_code)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á git repository
            self.setup_git_repository(project_dir, project_name)
            
            # Deploy ‡∏î‡πâ‡∏ß‡∏¢ GitHub Actions
            deployment_url = f"https://{project_name}.github.io"
            
            return {
                'success': True,
                'url': deployment_url,
                'project_dir': project_dir,
                'files_created': list(final_code.keys())
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def create_project_files(self, project_dir: str, code: Dict):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"""
        os.makedirs(project_dir, exist_ok=True)
        
        file_mapping = {
            'html': 'index.html',
            'css': 'style.css',
            'js': 'script.js',
            'manifest': 'manifest.json',
            'sw': 'sw.js',
            'sitemap': 'sitemap.xml',
            'robots': 'robots.txt',
            'readme': 'README.md',
            'github_workflow': '.github/workflows/deploy.yml',
            'package_json': 'package.json'
        }
        
        for code_type, filename in file_mapping.items():
            if code_type in code:
                filepath = os.path.join(project_dir, filename)
                os.makedirs(os.path.dirname(filepath), exist_ok=True)
                
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(code[code_type])
    
    def setup_git_repository(self, project_dir: str, project_name: str):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ git repository"""
        commands = [
            "git init",
            "git add .",
            "git commit -m 'Initial commit by Smart AI Automation'",
            f"git remote add origin https://github.com/username/{project_name}.git",
            "git branch -M main",
            "git push -u origin main"
        ]
        
        for cmd in commands:
            try:
                subprocess.run(cmd.split(), cwd=project_dir, check=True)
            except subprocess.CalledProcessError as e:
                print(f"‚ö†Ô∏è Git command failed: {cmd} - {e}")
    
    def learn_from_result(self, expanded_prompt: Dict, final_code: Dict, deployment_result: Dict):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        print("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...")
        
        conn = sqlite3.connect(self.learning_db)
        cursor = conn.cursor()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        prompt_hash = hashlib.md5(expanded_prompt['original'].encode()).hexdigest()
        performance_score = final_code.get('metadata', {}).get('performance_score', 0.0)
        
        cursor.execute('''
            INSERT INTO learning_history 
            (prompt_hash, original_prompt, expanded_prompt, code_sources, 
             performance_score, resource_usage, success_rate, timestamp)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            prompt_hash,
            expanded_prompt['original'],
            expanded_prompt['detailed_prompt'],
            json.dumps(expanded_prompt['recommended_sources']),
            performance_score,
            0.5,  # placeholder for resource usage
            1.0 if deployment_result['success'] else 0.0,
            datetime.now().isoformat()
        ))
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï learned patterns
        task_type = expanded_prompt['task_type']
        cursor.execute('''
            INSERT OR REPLACE INTO learned_patterns 
            (pattern_type, pattern_data, usage_count, success_rate, last_used)
            VALUES (?, ?, 
                    COALESCE((SELECT usage_count FROM learned_patterns WHERE pattern_type = ?), 0) + 1,
                    ?, ?)
        ''', (
            task_type,
            json.dumps({
                'sources': expanded_prompt['recommended_sources'],
                'optimizations': self.get_applied_optimizations(),
                'performance': performance_score
            }),
            task_type,
            1.0 if deployment_result['success'] else 0.0,
            datetime.now().isoformat()
        ))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {performance_score:.1f}")
    
    def run_automation(self, short_prompt: str) -> Dict:
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö automation ‡∏´‡∏•‡∏±‡∏Å"""
        print(f"\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Smart AI Automation")
        print(f"üìù ‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå: {short_prompt}")
        
        try:
            # 1. ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå
            expanded_prompt = self.expand_prompt(short_prompt)
            
            # 2. ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            if not self.display_for_approval(expanded_prompt):
                return {'success': False, 'message': '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'}
            
            # 3. ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
            code_results = self.scrape_code_from_sources(expanded_prompt)
            
            # 4. ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
            final_code = self.combine_and_optimize_code(code_results, expanded_prompt)
            
            # 5. Deploy ‡πÑ‡∏õ GitHub Pages
            deployment_result = self.deploy_to_github_pages(final_code, expanded_prompt)
            
            # 6. ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            self.learn_from_result(expanded_prompt, final_code, deployment_result)
            
            # 7. ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if deployment_result['success']:
                print(f"\nüéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {deployment_result['url']}")
                return {
                    'success': True,
                    'url': deployment_result['url'],
                    'performance_score': final_code['metadata']['performance_score'],
                    'files_created': deployment_result['files_created'],
                    'optimizations': final_code['metadata']['optimizations_applied']
                }
            else:
                print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {deployment_result['error']}")
                return {
                    'success': False,
                    'error': deployment_result['error']
                }
                
        except Exception as e:
            print(f"\nüí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

# Cursor AI Integration
def cursor_ai_command(prompt: str):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cursor AI"""
    automation = SmartAIAutomation()
    return automation.run_automation(prompt)

# CLI Interface
if __name__ == "__main__":
    print("ü§ñ Smart AI Automation System - ‡∏ü‡∏£‡∏µ 100%")
    print("=" * 60)
    
    automation = SmartAIAutomation()
    
    while True:
        try:
            prompt = input("\nüí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏™‡∏±‡πâ‡∏ô‡πÜ (‡∏´‡∏£‡∏∑‡∏≠ 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å): ").strip()
            
            if prompt.lower() in ['exit', 'quit', '‡∏≠‡∏≠‡∏Å']:
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Smart AI Automation!")
                break
            
            if not prompt:
                continue
            
            result = automation.run_automation(prompt)
            
            if result['success']:
                print(f"\n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! URL: {result['url']}")
                print(f"üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {result['performance_score']:.1f}/100")
            else:
                print(f"\n‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('error', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}")
                
        except KeyboardInterrupt:
            print("\n\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Smart AI Automation!")
            break
        except Exception as e:
            print(f"\nüí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

