#!/usr/bin/env python3
"""
Advanced Cursor AI System - ‡∏ü‡∏£‡∏µ 100%
‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå + Auto Deploy GitHub
‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô Cursor ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ‚Üí ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‚Üí Deploy
"""

import os
import json
import time
import requests
import threading
import subprocess
import sqlite3
import hashlib
import re
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime
import urllib.parse
from bs4 import BeautifulSoup
import random

class AdvancedCursorAI:
    def __init__(self, workspace_path: str = None):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Advanced Cursor AI"""
        self.workspace_path = Path(workspace_path) if workspace_path else Path.cwd()
        self.setup_workspace()
        
        # ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
        self.command_file = self.workspace_path / ".cursor_commands.json"
        self.response_file = self.workspace_path / ".cursor_responses.json"
        self.knowledge_db = self.workspace_path / "knowledge_base.db"
        self.projects_db = self.workspace_path / "projects.db"
        
        # ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏£‡∏µ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ API)
        self.knowledge_sources = {
            'wikipedia': {
                'base_url': 'https://en.wikipedia.org',
                'search_url': 'https://en.wikipedia.org/w/api.php?action=opensearch&search={}&limit=5&namespace=0&format=json',
                'content_url': 'https://en.wikipedia.org/wiki/{}'
            },
            'stackoverflow': {
                'base_url': 'https://stackoverflow.com',
                'search_url': 'https://stackoverflow.com/search?q={}',
                'content_selector': '.post-text, .answer'
            },
            'github_repos': {
                'base_url': 'https://github.com',
                'search_url': 'https://github.com/search?q={}&type=repositories',
                'content_selector': '.markdown-body, .readme'
            },
            'mdn_docs': {
                'base_url': 'https://developer.mozilla.org',
                'search_url': 'https://developer.mozilla.org/en-US/search?q={}',
                'content_selector': '.main-page-content, .article'
            },
            'w3schools': {
                'base_url': 'https://www.w3schools.com',
                'search_url': 'https://www.w3schools.com/search/search_asp.asp?where=95&q={}',
                'content_selector': '.w3-panel, .w3-example'
            },
            'tutorials_point': {
                'base_url': 'https://www.tutorialspoint.com',
                'search_url': 'https://www.tutorialspoint.com/search/search.jsp?q={}',
                'content_selector': '.tutorial-content, .content'
            }
        }
        
        # User-Agent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web Scraping
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        self.is_running = False
        self.init_databases()
        
    def setup_workspace(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ workspace"""
        self.workspace_path.mkdir(exist_ok=True)
        (self.workspace_path / ".cursor").mkdir(exist_ok=True)
        (self.workspace_path / ".cursor" / "extensions").mkdir(exist_ok=True)
        (self.workspace_path / "projects").mkdir(exist_ok=True)
        (self.workspace_path / "knowledge").mkdir(exist_ok=True)
        
    def init_databases(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        # ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
        conn = sqlite3.connect(self.knowledge_db)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS knowledge_cache (
                id INTEGER PRIMARY KEY,
                query_hash TEXT UNIQUE,
                query TEXT,
                source TEXT,
                content TEXT,
                relevance_score REAL,
                created_at TEXT,
                last_accessed TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS search_history (
                id INTEGER PRIMARY KEY,
                query TEXT,
                results_count INTEGER,
                search_time REAL,
                created_at TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        
        # ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        conn = sqlite3.connect(self.projects_db)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS projects (
                id INTEGER PRIMARY KEY,
                name TEXT,
                prompt TEXT,
                status TEXT,
                code_html TEXT,
                code_css TEXT,
                code_js TEXT,
                github_url TEXT,
                created_at TEXT,
                updated_at TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        
    def get_cached_knowledge(self, query_hash: str) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å cache"""
        try:
            conn = sqlite3.connect(self.knowledge_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT content, relevance_score, source, created_at 
                FROM knowledge_cache 
                WHERE query_hash = ? 
                ORDER BY relevance_score DESC
            ''', (query_hash,))
            
            results = cursor.fetchall()
            conn.close()
            
            if results:
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï last_accessed
                self.update_cache_access(query_hash)
                
                cached_results = []
                for content, score, source, created_at in results:
                    cached_results.append({
                        'content': content,
                        'relevance_score': score,
                        'source': source,
                        'created_at': created_at
                    })
                
                return {
                    'results': cached_results,
                    'from_cache': True
                }
                
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô cache: {e}")
        
        return None
    
    def cache_knowledge(self, query_hash: str, query: str, results: List[Dict]):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏•‡∏á cache"""
        try:
            conn = sqlite3.connect(self.knowledge_db)
            cursor = conn.cursor()
            
            current_time = datetime.now().isoformat()
            
            for result in results:
                cursor.execute('''
                    INSERT OR REPLACE INTO knowledge_cache 
                    (query_hash, query, source, content, relevance_score, created_at, last_accessed)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    query_hash,
                    query,
                    result['source'],
                    result['content'],
                    result.get('final_relevance_score', 0.5),
                    current_time,
                    current_time
                ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache: {e}")
    
    def update_cache_access(self, query_hash: str):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á cache"""
        try:
            conn = sqlite3.connect(self.knowledge_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE knowledge_cache 
                SET last_accessed = ? 
                WHERE query_hash = ?
            ''', (datetime.now().isoformat(), query_hash))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cache: {e}")
    
    def log_search_history(self, query: str, results_count: int, search_time: float):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        try:
            conn = sqlite3.connect(self.knowledge_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO search_history 
                (query, results_count, search_time, created_at)
                VALUES (?, ?, ?, ?)
            ''', (query, results_count, search_time, datetime.now().isoformat()))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥: {e}")
    
    def search_global_knowledge(self, query: str, max_sources: int = 3) -> Dict:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å"""
        print(f"üåç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å: {query}")
        
        query_hash = hashlib.md5(query.encode()).hexdigest()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
        cached_results = self.get_cached_knowledge(query_hash)
        if cached_results:
            print("üìö ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache")
            return cached_results
        
        start_time = time.time()
        all_results = []
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
        sources_to_search = list(self.knowledge_sources.keys())[:max_sources]
        
        for source in sources_to_search:
            try:
                print(f"  üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å {source}...")
                results = self.search_source(source, query)
                if results:
                    all_results.extend(results)
                    print(f"  ‚úÖ ‡∏û‡∏ö {len(results)} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å {source}")
                
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏ô rate limit
                time.sleep(random.uniform(1, 2))
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å {source}: {e}")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        sorted_results = self.rank_results(all_results, query)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô cache
        self.cache_knowledge(query_hash, query, sorted_results)
        
        search_time = time.time() - start_time
        self.log_search_history(query, len(sorted_results), search_time)
        
        print(f"‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(sorted_results)} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô {search_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        return {
            'query': query,
            'results': sorted_results[:10],  # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
            'total_results': len(sorted_results),
            'search_time': search_time,
            'sources_searched': sources_to_search
        }
    
    def search_source(self, source: str, query: str) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        results = []
        
        try:
            if source == 'wikipedia':
                results = self.search_wikipedia(query)
            elif source == 'stackoverflow':
                results = self.search_stackoverflow(query)
            elif source == 'github_repos':
                results = self.search_github_repos(query)
            elif source == 'mdn_docs':
                results = self.search_mdn(query)
            elif source == 'w3schools':
                results = self.search_w3schools(query)
            elif source == 'tutorials_point':
                results = self.search_tutorials_point(query)
            
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ {source}: {e}")
        
        return results
    
    def search_wikipedia(self, query: str) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Wikipedia"""
        try:
            search_url = self.knowledge_sources['wikipedia']['search_url'].format(urllib.parse.quote(query))
            response = self.session.get(search_url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                results = []
                
                if len(data) >= 2:
                    titles = data[1]
                    descriptions = data[2] if len(data) > 2 else []
                    
                    for i, title in enumerate(titles[:3]):
                        content_url = f"https://en.wikipedia.org/wiki/{urllib.parse.quote(title)}"
                        content = self.extract_wikipedia_content(content_url)
                        
                        results.append({
                            'source': 'wikipedia',
                            'title': title,
                            'description': descriptions[i] if i < len(descriptions) else '',
                            'url': content_url,
                            'content': content,
                            'relevance_score': 1.0 - (i * 0.1)
                        })
                
                return results
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Wikipedia: {e}")
        
        return []
    
    def extract_wikipedia_content(self, url: str) -> str:
        """‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å Wikipedia"""
        try:
            response = self.session.get(url, timeout=10)
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å paragraphs ‡πÅ‡∏£‡∏Å‡πÜ
                paragraphs = soup.find_all('p')[:5]
                content = '\n'.join([p.get_text().strip() for p in paragraphs if p.get_text().strip()])
                
                return content[:1000]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Wikipedia: {e}")
        
        return ""
    
    def search_stackoverflow(self, query: str) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Stack Overflow"""
        try:
            search_url = f"https://stackoverflow.com/search?q={urllib.parse.quote(query)}"
            response = self.session.get(search_url, timeout=10)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                results = []
                
                questions = soup.find_all('div', class_='question-summary')[:3]
                for i, question in enumerate(questions):
                    title_elem = question.find('h3')
                    if title_elem:
                        title = title_elem.get_text().strip()
                        link_elem = title_elem.find('a')
                        if link_elem:
                            url = "https://stackoverflow.com" + link_elem.get('href', '')
                            
                            results.append({
                                'source': 'stackoverflow',
                                'title': title,
                                'url': url,
                                'content': title,
                                'relevance_score': 1.0 - (i * 0.1)
                            })
                
                return results
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Stack Overflow: {e}")
        
        return []
    
    def search_github_repos(self, query: str) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å GitHub Repositories"""
        try:
            search_url = f"https://github.com/search?q={urllib.parse.quote(query)}&type=repositories"
            response = self.session.get(search_url, timeout=10)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                results = []
                
                repos = soup.find_all('div', class_='f4')[:3]
                for i, repo in enumerate(repos):
                    link_elem = repo.find('a')
                    if link_elem:
                        title = link_elem.get_text().strip()
                        url = "https://github.com" + link_elem.get('href', '')
                        
                        results.append({
                            'source': 'github_repos',
                            'title': title,
                            'url': url,
                            'content': f"GitHub Repository: {title}",
                            'relevance_score': 1.0 - (i * 0.1)
                        })
                
                return results
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î GitHub: {e}")
        
        return []
    
    def search_mdn(self, query: str) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å MDN Web Docs"""
        try:
            search_url = f"https://developer.mozilla.org/en-US/search?q={urllib.parse.quote(query)}"
            response = self.session.get(search_url, timeout=10)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                results = []
                
                articles = soup.find_all('article')[:3]
                for i, article in enumerate(articles):
                    title_elem = article.find('h2')
                    if title_elem:
                        link_elem = title_elem.find('a')
                        if link_elem:
                            title = link_elem.get_text().strip()
                            url = "https://developer.mozilla.org" + link_elem.get('href', '')
                            
                            results.append({
                                'source': 'mdn_docs',
                                'title': title,
                                'url': url,
                                'content': f"MDN Documentation: {title}",
                                'relevance_score': 1.0 - (i * 0.1)
                            })
                
                return results
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î MDN: {e}")
        
        return []
    
    def search_w3schools(self, query: str) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å W3Schools"""
        try:
            # W3Schools ‡∏°‡∏µ rate limiting ‡∏™‡∏π‡∏á ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock
            results = [{
                'source': 'w3schools',
                'title': f"W3Schools Tutorial: {query}",
                'url': f"https://www.w3schools.com/{query.lower().replace(' ', '_')}/",
                'content': f"W3Schools tutorial about {query}",
                'relevance_score': 0.8
            }]
            return results
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î W3Schools: {e}")
        
        return []
    
    def search_tutorials_point(self, query: str) -> List[Dict]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Tutorials Point"""
        try:
            # Tutorials Point ‡∏°‡∏µ rate limiting ‡∏™‡∏π‡∏á ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock
            results = [{
                'source': 'tutorials_point',
                'title': f"Tutorials Point: {query}",
                'url': f"https://www.tutorialspoint.com/{query.lower().replace(' ', '_')}/",
                'content': f"Tutorials Point guide about {query}",
                'relevance_score': 0.7
            }]
            return results
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Tutorials Point: {e}")
        
        return []
    
    def rank_results(self, results: List[Dict], query: str) -> List[Dict]:
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"""
        query_words = query.lower().split()
        
        for result in results:
            score = result.get('relevance_score', 0.5)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô title ‡∏´‡∏£‡∏∑‡∏≠ content
            title = result.get('title', '').lower()
            content = result.get('content', '').lower()
            
            for word in query_words:
                if word in title:
                    score += 0.2
                if word in content:
                    score += 0.1
            
            result['final_relevance_score'] = min(score, 1.0)
        
        return sorted(results, key=lambda x: x['final_relevance_score'], reverse=True)
    
    def generate_script_from_knowledge(self, prompt: str, knowledge_results: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ"""
        print(f"üõ†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ: {prompt}")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå prompt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        project_type = self.analyze_project_type(prompt)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        if 'website' in project_type or 'web' in project_type:
            code = self.generate_website_code(prompt, knowledge_results)
        elif 'api' in project_type or 'backend' in project_type:
            code = self.generate_api_code(prompt, knowledge_results)
        elif 'script' in project_type or 'automation' in project_type:
            code = self.generate_automation_script(prompt, knowledge_results)
        else:
            code = self.generate_general_code(prompt, knowledge_results)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        project_id = self.save_project(prompt, code)
        
        return {
            'project_id': project_id,
            'project_type': project_type,
            'code': code,
            'knowledge_used': len(knowledge_results.get('results', [])),
            'created_at': datetime.now().isoformat()
        }
    
    def analyze_project_type(self, prompt: str) -> str:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏à‡∏≤‡∏Å prompt"""
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ['website', 'web', 'html', 'css', 'frontend']):
            return 'website'
        elif any(word in prompt_lower for word in ['api', 'backend', 'server', 'flask', 'django']):
            return 'api'
        elif any(word in prompt_lower for word in ['script', 'automation', 'bot', 'scraper']):
            return 'script'
        else:
            return 'general'
    
    def generate_website_code(self, prompt: str, knowledge_results: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML
        html_code = f'''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{prompt}</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header>
        <h1>{prompt}</h1>
        <nav>
            <ul>
                <li><a href="#home">‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</a></li>
                <li><a href="#about">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö</a></li>
                <li><a href="#contact">‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        <section id="home">
            <h2>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö</h2>
            <p>‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å {len(knowledge_results.get('results', []))} ‡πÅ‡∏´‡∏•‡πà‡∏á</p>
        </section>
        
        <section id="about">
            <h2>‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ</h2>
            <p>{prompt}</p>
        </section>
        
        <section id="contact">
            <h2>‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤</h2>
            <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Advanced Cursor AI System</p>
        </section>
    </main>
    
    <footer>
        <p>&copy; 2024 Advanced Cursor AI</p>
    </footer>
    
    <script src="script.js"></script>
</body>
</html>'''
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á CSS
        css_code = '''* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #f4f4f4;
}

header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1rem 0;
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 1000;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

header h1 {
    text-align: center;
    margin-bottom: 1rem;
}

nav ul {
    list-style: none;
    display: flex;
    justify-content: center;
    gap: 2rem;
}

nav a {
    color: white;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    transition: background-color 0.3s;
}

nav a:hover {
    background-color: rgba(255,255,255,0.2);
}

main {
    margin-top: 150px;
    padding: 2rem;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
}

section {
    background: white;
    margin: 2rem 0;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

h2 {
    color: #667eea;
    margin-bottom: 1rem;
}

footer {
    background: #333;
    color: white;
    text-align: center;
    padding: 1rem;
    margin-top: 2rem;
}

@media (max-width: 768px) {
    nav ul {
        flex-direction: column;
        gap: 1rem;
    }
    
    main {
        margin-top: 200px;
        padding: 1rem;
    }
}'''
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á JavaScript
        js_code = '''document.addEventListener('DOMContentLoaded', function() {
    // Smooth scrolling for navigation links
    const navLinks = document.querySelectorAll('nav a[href^="#"]');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            
            if (targetSection) {
                targetSection.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
    
    // Add fade-in animation to sections
    const sections = document.querySelectorAll('section');
    
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);
    
    sections.forEach(section => {
        section.style.opacity = '0';
        section.style.transform = 'translateY(20px)';
        section.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(section);
    });
    
    console.log('Advanced Cursor AI Website loaded successfully!');
});'''
        
        return {
            'html': html_code,
            'css': css_code,
            'js': js_code,
            'type': 'website'
        }
    
    def generate_api_code(self, prompt: str, knowledge_results: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î API"""
        python_code = f'''#!/usr/bin/env python3
"""
API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {prompt}
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Advanced Cursor AI System
"""

from flask import Flask, jsonify, request
from flask_cors import CORS
import json
from datetime import datetime

app = Flask(__name__)
CORS(app)

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
KNOWLEDGE_DATA = {json.dumps(knowledge_results.get('results', [])[:3], indent=2, ensure_ascii=False)}

@app.route('/')
def home():
    return jsonify({{
        "message": "API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {prompt}",
        "version": "1.0.0",
        "created_by": "Advanced Cursor AI",
        "endpoints": [
            "/api/data",
            "/api/search",
            "/api/knowledge"
        ]
    }})

@app.route('/api/data')
def get_data():
    return jsonify({{
        "status": "success",
        "data": {{
            "prompt": "{prompt}",
            "timestamp": datetime.now().isoformat(),
            "knowledge_sources": {len(knowledge_results.get('results', []))}
        }}
    }})

@app.route('/api/search')
def search():
    query = request.args.get('q', '')
    if not query:
        return jsonify({{"error": "Missing query parameter"}})
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
    results = []
    for item in KNOWLEDGE_DATA:
        if query.lower() in item.get('content', '').lower():
            results.append(item)
    
    return jsonify({{
        "query": query,
        "results": results,
        "count": len(results)
    }})

@app.route('/api/knowledge')
def get_knowledge():
    return jsonify({{
        "knowledge_base": KNOWLEDGE_DATA,
        "total_sources": len(KNOWLEDGE_DATA)
    }})

if __name__ == '__main__':
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô API Server...")
    print("üì° API Endpoints:")
    print("   - GET /")
    print("   - GET /api/data")
    print("   - GET /api/search?q=<query>")
    print("   - GET /api/knowledge")
    app.run(host='0.0.0.0', port=5000, debug=True)
'''
        
        return {
            'python': python_code,
            'type': 'api'
        }
    
    def generate_automation_script(self, prompt: str, knowledge_results: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        python_code = f'''#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {prompt}
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Advanced Cursor AI System
"""

import os
import time
import requests
import json
from datetime import datetime
from pathlib import Path

class AutomationScript:
    def __init__(self):
        self.prompt = "{prompt}"
        self.knowledge_data = {json.dumps(knowledge_results.get('results', [])[:3], indent=2, ensure_ascii=False)}
        self.start_time = datetime.now()
        
    def run(self):
        """‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å"""
        print(f"ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {{self.prompt}}")
        print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {{self.start_time}}")
        
        try:
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.prepare_data()
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            self.process_data()
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            self.save_results()
            
            print("‚úÖ ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {{e}}")
    
    def prepare_data(self):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        print("üìã ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.output_dir = Path("automation_results")
        self.output_dir.mkdir(exist_ok=True)
        
        print(f"üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {{self.output_dir}}")
    
    def process_data(self):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        print("‚öôÔ∏è ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
        processed_data = []
        for item in self.knowledge_data:
            processed_item = {{
                "source": item.get("source", "unknown"),
                "title": item.get("title", ""),
                "processed_at": datetime.now().isoformat(),
                "content_length": len(item.get("content", ""))
            }}
            processed_data.append(processed_item)
        
        self.processed_data = processed_data
        print(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {{len(processed_data)}} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    def save_results(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...")
        
        results = {{
            "prompt": self.prompt,
            "start_time": self.start_time.isoformat(),
            "end_time": datetime.now().isoformat(),
            "processed_data": self.processed_data,
            "summary": {{
                "total_items": len(self.processed_data),
                "sources": list(set([item["source"] for item in self.processed_data]))
            }}
        }}
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô JSON
        output_file = self.output_dir / f"results_{{datetime.now().strftime('%Y%m%d_%H%M%S')}}.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {{output_file}}")

def main():
    script = AutomationScript()
    script.run()

if __name__ == "__main__":
    main()
'''
        
        return {
            'python': python_code,
            'type': 'automation'
        }
    
    def generate_general_code(self, prompt: str, knowledge_results: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        python_code = f'''#!/usr/bin/env python3
"""
‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {prompt}
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Advanced Cursor AI System
"""

import json
from datetime import datetime

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: {prompt}")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ
    knowledge_data = {json.dumps(knowledge_results.get('results', [])[:3], indent=2, ensure_ascii=False)}
    
    print(f"üìö ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ {{len(knowledge_data)}} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
    for i, item in enumerate(knowledge_data, 1):
        print(f"\\n{{i}}. ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤: {{item.get('source', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}}")
        print(f"   ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {{item.get('title', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠')}}")
        print(f"   ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {{item.get('content', '')[:100]}}...")
    
    print("\\n‚úÖ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == "__main__":
    main()
'''
        
        return {
            'python': python_code,
            'type': 'general'
        }
    
    def save_project(self, prompt: str, code: Dict) -> int:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        try:
            conn = sqlite3.connect(self.projects_db)
            cursor = conn.cursor()
            
            current_time = datetime.now().isoformat()
            
            cursor.execute('''
                INSERT INTO projects 
                (name, prompt, status, code_html, code_css, code_js, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                prompt[:100],  # ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
                prompt,
                'pending',
                code.get('html', ''),
                code.get('css', ''),
                code.get('js', '') or code.get('python', ''),
                current_time,
                current_time
            ))
            
            project_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            return project_id
            
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {e}")
            return 0
    
    def start_cursor_integration(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Cursor"""
        self.is_running = True
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô monitoring thread
        monitor_thread = threading.Thread(target=self._monitor_cursor_commands, daemon=True)
        monitor_thread.start()
        
        print("üëÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor AI...")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {self.command_file}")
        print(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: {self.response_file}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        self.create_example_files()
    
    def create_example_files(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        example_command = {
            "prompt": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß",
            "action": "create"
        }
        
        with open(self.command_file, 'w', encoding='utf-8') as f:
            json.dump(example_command, f, indent=2, ensure_ascii=False)
        
        print(f"üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {self.command_file}")
    
    def _monitor_cursor_commands(self):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor"""
        last_modified = 0
        
        while self.is_running:
            try:
                if self.command_file.exists():
                    current_modified = self.command_file.stat().st_mtime
                    
                    if current_modified > last_modified:
                        last_modified = current_modified
                        self._process_cursor_command()
                
                time.sleep(1)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
            except Exception as e:
                print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°: {e}")
                time.sleep(5)
    
    def _process_cursor_command(self):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor"""
        try:
            with open(self.command_file, 'r', encoding='utf-8') as f:
                content = f.read().strip()
            
            if not content:
                return
            
            # ‡πÅ‡∏õ‡∏•‡∏á JSON
            try:
                command_data = json.loads(content)
            except json.JSONDecodeError:
                command_data = {'prompt': content, 'action': 'create'}
            
            prompt = command_data.get('prompt', '').strip()
            action = command_data.get('action', 'create').lower()
            
            if not prompt:
                return
            
            print(f"\nüì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor: {prompt}")
            print(f"üé¨ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥: {action}")
            
            if action == 'create':
                self._handle_create_action(prompt)
            elif action == 'confirm':
                self._handle_confirm_action(prompt)
            elif action == 'edit':
                self._handle_edit_action(prompt, command_data.get('edit_details', ''))
            elif action == 'cancel':
                self._handle_cancel_action(prompt)
            
            # ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            with open(self.command_file, 'w') as f:
                f.write('')
                
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")
    
    def _handle_create_action(self, prompt: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà"""
        self._update_cursor_status("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å...", "searching")
        
        # 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
        knowledge_results = self.search_global_knowledge(prompt)
        
        self._update_cursor_status("üõ†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ...", "generating")
        
        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
        script_code = self.generate_script_from_knowledge(prompt, knowledge_results)
        
        # 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        self._show_confirmation_dialog(prompt, script_code, knowledge_results)
    
    def _handle_confirm_action(self, prompt: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô - Deploy ‡πÑ‡∏õ GitHub"""
        self._update_cursor_status("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Deploy ‡πÑ‡∏õ GitHub...", "deploying")
        
        # ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        project_data = self._get_latest_project_data()
        if project_data:
            success = self.deploy_to_github(project_data)
            if success:
                self._update_cursor_status("‚úÖ Deploy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "completed")
            else:
                self._update_cursor_status("‚ùå Deploy ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "error")
    
    def _handle_edit_action(self, prompt: str, edit_details: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        self._update_cursor_status("‚úèÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...", "editing")
        
        # ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        project_data = self._get_latest_project_data()
        if project_data:
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏≤‡∏° edit_details
            modified_code = self._modify_code(project_data, edit_details)
            self._show_confirmation_dialog(prompt, modified_code, {})
    
    def _handle_cancel_action(self, prompt: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"""
        self._update_cursor_status("üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "cancelled")
        print(f"üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô: {prompt}")
    
    def _update_cursor_status(self, message: str, status: str):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ Cursor"""
        response_data = {
            "status": status,
            "message": message,
            "timestamp": datetime.now().isoformat()
        }
        
        with open(self.response_file, 'w', encoding='utf-8') as f:
            json.dump(response_data, f, indent=2, ensure_ascii=False)
        
        print(f"üì° ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {message}")
    
    def _show_confirmation_dialog(self, prompt: str, script_code: Dict, knowledge_results: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"""
        confirmation_data = {
            "prompt": prompt,
            "script_code": script_code,
            "knowledge_sources": len(knowledge_results.get('results', [])),
            "actions": ["‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"],
            "timestamp": datetime.now().isoformat()
        }
        
        with open(self.response_file, 'w', encoding='utf-8') as f:
            json.dump(confirmation_data, f, indent=2, ensure_ascii=False)
        
        print(f"üí¨ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {prompt}")
        print("üîÑ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...")
    
    def _get_latest_project_data(self) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        try:
            conn = sqlite3.connect(self.projects_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT * FROM projects 
                ORDER BY created_at DESC 
                LIMIT 1
            ''')
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                return {
                    'id': row[0],
                    'name': row[1],
                    'prompt': row[2],
                    'status': row[3],
                    'code_html': row[4],
                    'code_css': row[5],
                    'code_js': row[6],
                    'github_url': row[7],
                    'created_at': row[8],
                    'updated_at': row[9]
                }
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {e}")
        
        return None
    
    def _modify_code(self, project_data: Dict, edit_details: str) -> Dict:
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏≤‡∏° edit_details"""
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ)
        modified_code = {
            'html': project_data.get('code_html', ''),
            'css': project_data.get('code_css', ''),
            'js': project_data.get('code_js', ''),
            'type': 'website'
        }
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∞‡πÑ‡∏£
        if modified_code['html']:
            modified_code['html'] += f"\n<!-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {edit_details} -->"
        
        return modified_code
    
    def deploy_to_github(self, project_data: Dict) -> bool:
        """Deploy ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏õ GitHub"""
        try:
            print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Deploy ‡πÑ‡∏õ GitHub...")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
            project_name = project_data['name'].replace(' ', '_').lower()
            project_dir = self.workspace_path / "projects" / project_name
            project_dir.mkdir(exist_ok=True)
            
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏Ñ‡πâ‡∏î
            if project_data.get('code_html'):
                with open(project_dir / "index.html", 'w', encoding='utf-8') as f:
                    f.write(project_data['code_html'])
            
            if project_data.get('code_css'):
                with open(project_dir / "style.css", 'w', encoding='utf-8') as f:
                    f.write(project_data['code_css'])
            
            if project_data.get('code_js'):
                js_filename = "script.js" if project_data.get('code_html') else "main.py"
                with open(project_dir / js_filename, 'w', encoding='utf-8') as f:
                    f.write(project_data['code_js'])
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á README.md
            readme_content = f"""# {project_data['name']}

## ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
{project_data['prompt']}

## ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢
Advanced Cursor AI System

## ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
{project_data['created_at']}

## ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå index.html ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå)
2. ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå main.py (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå Python)

## ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö responsive design
- ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
"""
            
            with open(project_dir / "README.md", 'w', encoding='utf-8') as f:
                f.write(readme_content)
            
            print(f"üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏ô: {project_dir}")
            print("‚úÖ Deploy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Local)")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self._update_project_status(project_data['id'], 'deployed', str(project_dir))
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Deploy: {e}")
            return False
    
    def _update_project_status(self, project_id: int, status: str, github_url: str = ""):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"""
        try:
            conn = sqlite3.connect(self.projects_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE projects 
                SET status = ?, github_url = ?, updated_at = ?
                WHERE id = ?
            ''', (status, github_url, datetime.now().isoformat(), project_id))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {e}")
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        self.is_running = False
        print("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö")
    
    def get_stats(self) -> Dict:
        """‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        try:
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            conn = sqlite3.connect(self.knowledge_db)
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM search_history')
            total_searches = cursor.fetchone()[0]
            
            cursor.execute('SELECT AVG(search_time) FROM search_history')
            avg_search_time = cursor.fetchone()[0] or 0
            
            conn.close()
            
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
            conn = sqlite3.connect(self.projects_db)
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM projects')
            total_projects = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM projects WHERE status = "deployed"')
            deployed_projects = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total_searches': total_searches,
                'avg_search_time': round(avg_search_time, 2),
                'total_projects': total_projects,
                'deployed_projects': deployed_projects,
                'success_rate': round((deployed_projects / max(total_projects, 1)) * 100, 2)
            }
            
        except Exception as e:
            print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {e}")
            return {}

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Advanced Cursor AI System")
    print("=" * 50)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    ai_system = AdvancedCursorAI()
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
        print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ...")
        test_query = "Python web development"
        knowledge_results = ai_system.search_global_knowledge(test_query, max_sources=2)
        
        print(f"‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏û‡∏ö {len(knowledge_results.get('results', []))} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
        print("\nüõ†Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î...")
        test_prompt = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß"
        script_code = ai_system.generate_script_from_knowledge(test_prompt, knowledge_results)
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó {script_code.get('project_type', 'unknown')}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        print("\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        stats = ai_system.get_stats()
        for key, value in stats.items():
            print(f"   {key}: {value}")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Cursor
        print("\nüîó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Cursor...")
        ai_system.start_cursor_integration()
        
        print("\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print("üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("   1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå .cursor_commands.json")
        print("   2. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        print("   3. ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô .cursor_responses.json")
        print("\n‚å®Ô∏è ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö
        while ai_system.is_running:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\nüõë ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
    except Exception as e:
        print(f"\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        ai_system.stop()
        print("üëã ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

if __name__ == "__main__":
    main()

