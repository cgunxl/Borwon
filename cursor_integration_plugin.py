#!/usr/bin/env python3
"""
Cursor AI Integration Plugin - ‡∏ü‡∏£‡∏µ 100%
Plugin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Cursor AI ‡∏Å‡∏±‡∏ö Smart AI Automation System
"""

import os
import json
import subprocess
import threading
import time
from pathlib import Path
from smart_ai_automation_system import SmartAIAutomation

class CursorAIPlugin:
    def __init__(self):
        self.automation = SmartAIAutomation()
        self.cursor_workspace = None
        self.watch_file = ".cursor_commands.json"
        self.response_file = ".cursor_responses.json"
        self.is_watching = False
        
    def setup_cursor_integration(self, workspace_path: str):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Cursor AI"""
        self.cursor_workspace = Path(workspace_path)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
        self.command_file = self.cursor_workspace / self.watch_file
        self.response_file_path = self.cursor_workspace / self.response_file
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.command_file.touch()
        self.response_file_path.touch()
        
        print(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cursor integration ‡πÉ‡∏ô: {workspace_path}")
        
    def start_watching(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor"""
        if self.is_watching:
            return
            
        self.is_watching = True
        watch_thread = threading.Thread(target=self._watch_commands, daemon=True)
        watch_thread.start()
        print("üëÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor AI...")
        
    def stop_watching(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        self.is_watching = False
        print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor AI")
        
    def _watch_commands(self):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor"""
        last_modified = 0
        
        while self.is_watching:
            try:
                if self.command_file.exists():
                    current_modified = self.command_file.stat().st_mtime
                    
                    if current_modified > last_modified:
                        last_modified = current_modified
                        self._process_command_file()
                        
                time.sleep(1)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
            except Exception as e:
                print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°: {e}")
                time.sleep(5)
                
    def _process_command_file(self):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            with open(self.command_file, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                
            if not content:
                return
                
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏Å‡πà‡∏≠‡∏ô
            try:
                command_data = json.loads(content)
                if isinstance(command_data, dict) and 'prompt' in command_data:
                    prompt = command_data['prompt']
                    options = command_data.get('options', {})
                else:
                    prompt = content
                    options = {}
            except json.JSONDecodeError:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô text ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                prompt = content
                options = {}
                
            if prompt:
                print(f"\nüì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Cursor: {prompt}")
                self._execute_automation(prompt, options)
                
                # ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                with open(self.command_file, 'w') as f:
                    f.write('')
                    
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")
            
    def _execute_automation(self, prompt: str, options: dict):
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö automation"""
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Cursor
            self._update_cursor_status("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...", "processing")
            
            # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö automation
            result = self.automation.run_automation(prompt)
            
            # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Cursor
            self._send_result_to_cursor(result, prompt)
            
        except Exception as e:
            error_result = {
                'success': False,
                'error': str(e),
                'prompt': prompt
            }
            self._send_result_to_cursor(error_result, prompt)
            
    def _update_cursor_status(self, message: str, status: str):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Cursor"""
        status_data = {
            'timestamp': time.time(),
            'message': message,
            'status': status
        }
        
        try:
            with open(self.response_file_path, 'w', encoding='utf-8') as f:
                json.dump(status_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: {e}")
            
    def _send_result_to_cursor(self, result: dict, original_prompt: str):
        """‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Cursor"""
        response_data = {
            'timestamp': time.time(),
            'original_prompt': original_prompt,
            'result': result,
            'status': 'completed' if result['success'] else 'error'
        }
        
        try:
            with open(self.response_file_path, 'w', encoding='utf-8') as f:
                json.dump(response_data, f, ensure_ascii=False, indent=2)
                
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô console
            if result['success']:
                print(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! URL: {result.get('url', 'N/A')}")
                print(f"üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {result.get('performance_score', 0):.1f}/100")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô workspace
                self._create_result_files(result, original_prompt)
            else:
                print(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('error', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')}")
                
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ: {e}")
            
    def _create_result_files(self, result: dict, prompt: str):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô workspace"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            result_dir = self.cursor_workspace / "ai_generated"
            result_dir.mkdir(exist_ok=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            summary_file = result_dir / "result_summary.md"
            summary_content = f"""# AI Automation Result

## Original Prompt
{prompt}

## Result
- **Status:** {'‚úÖ Success' if result['success'] else '‚ùå Failed'}
- **URL:** {result.get('url', 'N/A')}
- **Performance Score:** {result.get('performance_score', 0):.1f}/100

## Files Created
{chr(10).join(f"- {file}" for file in result.get('files_created', []))}

## Optimizations Applied
{chr(10).join(f"- {opt}" for opt in result.get('optimizations', []))}

## Generated At
{time.strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            with open(summary_file, 'w', encoding='utf-8') as f:
                f.write(summary_content)
                
            print(f"üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {summary_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ: {e}")

# Cursor AI Extension Script
def create_cursor_extension():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á extension script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cursor AI"""
    extension_script = '''
// Cursor AI Extension for Smart AI Automation
// ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô .cursor/extensions/

class SmartAIExtension {
    constructor() {
        this.commandFile = '.cursor_commands.json';
        this.responseFile = '.cursor_responses.json';
        this.isWatching = false;
        this.setupUI();
        this.startWatching();
    }
    
    setupUI() {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á UI panel ‡πÉ‡∏ô Cursor
        const panel = document.createElement('div');
        panel.id = 'smart-ai-panel';
        panel.innerHTML = `
            <div style="padding: 10px; border: 1px solid #ccc; margin: 10px;">
                <h3>ü§ñ Smart AI Automation</h3>
                <textarea id="ai-prompt" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏™‡∏±‡πâ‡∏ô‡πÜ..." 
                         style="width: 100%; height: 60px; margin: 5px 0;"></textarea>
                <button onclick="smartAI.sendCommand()" style="padding: 5px 10px;">
                    üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
                </button>
                <div id="ai-status" style="margin-top: 10px; font-size: 12px;"></div>
            </div>
        `;
        
        // ‡πÅ‡∏ó‡∏£‡∏Å‡πÉ‡∏ô sidebar ‡∏´‡∏£‡∏∑‡∏≠ panel ‡∏Ç‡∏≠‡∏á Cursor
        const sidebar = document.querySelector('.sidebar') || document.body;
        sidebar.appendChild(panel);
    }
    
    sendCommand() {
        const promptInput = document.getElementById('ai-prompt');
        const prompt = promptInput.value.trim();
        
        if (!prompt) {
            this.updateStatus('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå', 'error');
            return;
        }
        
        this.updateStatus('üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...', 'processing');
        
        const commandData = {
            prompt: prompt,
            timestamp: Date.now(),
            options: {
                auto_deploy: true,
                optimize: true
            }
        };
        
        // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        this.writeToFile(this.commandFile, JSON.stringify(commandData, null, 2));
        
        // ‡∏•‡πâ‡∏≤‡∏á input
        promptInput.value = '';
    }
    
    startWatching() {
        if (this.isWatching) return;
        
        this.isWatching = true;
        this.watchInterval = setInterval(() => {
            this.checkResponse();
        }, 2000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }
    
    checkResponse() {
        this.readFromFile(this.responseFile)
            .then(content => {
                if (content) {
                    try {
                        const response = JSON.parse(content);
                        this.handleResponse(response);
                    } catch (e) {
                        console.error('Error parsing response:', e);
                    }
                }
            })
            .catch(err => {
                // ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error
            });
    }
    
    handleResponse(response) {
        const { status, result, original_prompt } = response;
        
        if (status === 'processing') {
            this.updateStatus('‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...', 'processing');
        } else if (status === 'completed') {
            if (result.success) {
                this.updateStatus(
                    `‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! <a href="${result.url}" target="_blank">‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</a>`, 
                    'success'
                );
                this.showSuccessNotification(result);
            } else {
                this.updateStatus(`‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${result.error}`, 'error');
            }
        }
    }
    
    updateStatus(message, type) {
        const statusDiv = document.getElementById('ai-status');
        if (statusDiv) {
            statusDiv.innerHTML = message;
            statusDiv.className = `status-${type}`;
        }
    }
    
    showSuccessNotification(result) {
        // ‡πÅ‡∏™‡∏î‡∏á notification ‡πÉ‡∏ô Cursor
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4CAF50;
            color: white;
            padding: 15px;
            border-radius: 5px;
            z-index: 10000;
            max-width: 300px;
        `;
        
        notification.innerHTML = `
            <strong>üéâ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!</strong><br>
            URL: <a href="${result.url}" target="_blank" style="color: #fff;">${result.url}</a><br>
            ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${result.performance_score}/100
        `;
        
        document.body.appendChild(notification);
        
        // ‡∏•‡∏ö notification ‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 5000);
    }
    
    // File I/O methods (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Cursor API)
    writeToFile(filename, content) {
        // ‡πÉ‡∏ä‡πâ Cursor API ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        if (window.cursor && window.cursor.fs) {
            return window.cursor.fs.writeFile(filename, content);
        } else {
            // Fallback: ‡πÉ‡∏ä‡πâ localStorage
            localStorage.setItem(filename, content);
        }
    }
    
    readFromFile(filename) {
        // ‡πÉ‡∏ä‡πâ Cursor API ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
        if (window.cursor && window.cursor.fs) {
            return window.cursor.fs.readFile(filename);
        } else {
            // Fallback: ‡πÉ‡∏ä‡πâ localStorage
            return Promise.resolve(localStorage.getItem(filename) || '');
        }
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô extension
const smartAI = new SmartAIExtension();

// CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö styling
const style = document.createElement('style');
style.textContent = `
    #smart-ai-panel {
        background: #f5f5f5;
        border-radius: 5px;
        margin: 10px 0;
    }
    
    #smart-ai-panel h3 {
        margin: 0 0 10px 0;
        color: #333;
    }
    
    #smart-ai-panel textarea {
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 5px;
        font-family: monospace;
    }
    
    #smart-ai-panel button {
        background: #007ACC;
        color: white;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }
    
    #smart-ai-panel button:hover {
        background: #005a9e;
    }
    
    .status-processing { color: #ff9800; }
    .status-success { color: #4caf50; }
    .status-error { color: #f44336; }
`;
document.head.appendChild(style);
'''
    
    return extension_script

# CLI Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cursor Integration
def main():
    print("ü§ñ Cursor AI Integration Plugin - ‡∏ü‡∏£‡∏µ 100%")
    print("=" * 60)
    
    plugin = CursorAIPlugin()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ workspace
    workspace = input("üìÅ ‡πÉ‡∏™‡πà path ‡∏Ç‡∏≠‡∏á Cursor workspace (‡∏´‡∏£‡∏∑‡∏≠ Enter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö current directory): ").strip()
    if not workspace:
        workspace = os.getcwd()
        
    plugin.setup_cursor_integration(workspace)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á extension script
    extension_script = create_cursor_extension()
    extension_file = Path(workspace) / ".cursor" / "extensions" / "smart_ai.js"
    extension_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(extension_file, 'w', encoding='utf-8') as f:
        f.write(extension_script)
        
    print(f"üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á Cursor extension: {extension_file}")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    plugin.start_watching()
    
    print("\n‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    print("üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print("1. ‡πÄ‡∏õ‡∏¥‡∏î Cursor AI")
    print("2. ‡∏î‡∏π panel 'Smart AI Automation' ‡πÉ‡∏ô sidebar")
    print("3. ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤'")
    print("4. ‡∏Å‡∏î '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ'")
    print("5. ‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå!")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        plugin.stop_watching()
        print("\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")

if __name__ == "__main__":
    main()

