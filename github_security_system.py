#!/usr/bin/env python3
"""
GitHub Security System - ‡∏ü‡∏£‡∏µ 100%
‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô API Keys ‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Cursor AI ‡πÅ‡∏•‡∏∞ GitHub
"""

import os
import re
import json
import hashlib
import hmac
import time
import base64
import subprocess
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import secrets
import logging

class GitHubSecuritySystem:
    def __init__(self, project_path: str = None):
        self.project_path = Path(project_path) if project_path else Path.cwd()
        self.security_config_file = self.project_path / ".security_config.json"
        self.encrypted_secrets_file = self.project_path / ".encrypted_secrets"
        self.gitignore_file = self.project_path / ".gitignore"
        self.cursor_rules_file = self.project_path / ".cursor" / "rules"
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ patterns ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
        self.dangerous_patterns = [
            r'api[_-]?key\s*[=:]\s*["\']?([a-zA-Z0-9_-]{20,})["\']?',
            r'secret[_-]?key\s*[=:]\s*["\']?([a-zA-Z0-9_-]{20,})["\']?',
            r'access[_-]?token\s*[=:]\s*["\']?([a-zA-Z0-9_-]{20,})["\']?',
            r'private[_-]?key\s*[=:]\s*["\']?([a-zA-Z0-9_-]{20,})["\']?',
            r'password\s*[=:]\s*["\']?([a-zA-Z0-9_-]{8,})["\']?',
            r'github[_-]?token\s*[=:]\s*["\']?(ghp_[a-zA-Z0-9]{36})["\']?',
            r'openai[_-]?api[_-]?key\s*[=:]\s*["\']?(sk-[a-zA-Z0-9]{48})["\']?',
            r'aws[_-]?access[_-]?key\s*[=:]\s*["\']?(AKIA[a-zA-Z0-9]{16})["\']?',
            r'bearer\s+([a-zA-Z0-9_-]{20,})',
            r'authorization:\s*["\']?bearer\s+([a-zA-Z0-9_-]{20,})["\']?'
        ]
        
        # ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
        self.protected_files = [
            '.env', '.env.local', '.env.production', '.env.development',
            '*.pem', '*.key', '*.p12', '*.keystore', '*.jks',
            'config.json', 'secrets.json', 'credentials.json',
            '.aws/credentials', '.ssh/id_rsa', '.ssh/id_ed25519'
        ]
        
        self.init_security_system()
    
    def init_security_system(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        self.logger.info("üîí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ GitHub Security System")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        (self.project_path / ".cursor").mkdir(exist_ok=True)
        (self.project_path / ".github" / "workflows").mkdir(parents=True, exist_ok=True)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        self.setup_gitignore()
        self.setup_cursor_rules()
        self.setup_pre_commit_hooks()
        self.setup_github_actions_security()
        self.create_security_config()
        
        self.logger.info("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    def setup_gitignore(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ .gitignore ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
        gitignore_content = """# Security - API Keys ‡πÅ‡∏•‡∏∞ Secrets
.env
.env.local
.env.development
.env.production
.env.test
*.pem
*.key
*.p12
*.keystore
*.jks
config.json
secrets.json
credentials.json
.aws/
.ssh/
*.log

# Security System Files
.security_config.json
.encrypted_secrets
.cursor/cache/
.cursor/logs/

# Dependencies
node_modules/
__pycache__/
*.pyc
.venv/
venv/

# Build outputs
dist/
build/
.next/
.nuxt/

# IDE
.vscode/settings.json
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Temporary files
*.tmp
*.temp
.cache/
"""
        
        try:
            with open(self.gitignore_file, 'w', encoding='utf-8') as f:
                f.write(gitignore_content)
            self.logger.info("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ .gitignore ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á .gitignore: {e}")
    
    def setup_cursor_rules(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏é‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cursor AI"""
        cursor_rules = """# Cursor AI Security Rules

## üîí ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ - ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î

### ‡∏´‡πâ‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô/‡πÅ‡∏™‡∏î‡∏á/‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:
- .env, .env.*, *.pem, *.key, *.keystore
- config.json, secrets.json, credentials.json
- .aws/credentials, .ssh/id_rsa, .ssh/id_ed25519
- ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏î‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ API keys, passwords, tokens

### ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà:
- ‡πÉ‡∏™‡πà API keys ‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á frontend/client-side
- hardcode passwords ‡∏´‡∏£‡∏∑‡∏≠ secrets
- ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô console.log
- ‡∏™‡πà‡∏á sensitive data ‡∏ú‡πà‡∏≤‡∏ô URL parameters

### ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÄ‡∏™‡∏°‡∏≠:
- ‡πÉ‡∏ä‡πâ environment variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö secrets
- ‡∏™‡∏£‡πâ‡∏≤‡∏á proxy/backend ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API calls
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö secrets ‡∏Å‡πà‡∏≠‡∏ô commit
- ‡πÉ‡∏ä‡πâ HTTPS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production

## üõ°Ô∏è Best Practices

### ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á API integration:
1. ‡∏™‡∏£‡πâ‡∏≤‡∏á backend proxy ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å frontend
2. ‡πÉ‡∏ä‡πâ rate limiting ‡πÅ‡∏•‡∏∞ authentication
3. validate input ‡πÅ‡∏•‡∏∞ sanitize output
4. ‡πÉ‡∏ä‡πâ CORS policy ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°

### ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö secrets:
1. ‡πÉ‡∏ä‡πâ .env files (‡πÑ‡∏°‡πà commit)
2. ‡∏™‡∏£‡πâ‡∏≤‡∏á .env.example ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏°
3. ‡πÉ‡∏ä‡πâ platform secrets (Vercel, Netlify, etc.)
4. rotate keys ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥

### ‡πÄ‡∏°‡∏∑‡πà‡∏≠ deploy:
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ secrets ‡πÉ‡∏ô build output
2. ‡πÉ‡∏ä‡πâ environment variables ‡∏ö‡∏ô platform
3. ‡πÄ‡∏õ‡∏¥‡∏î security headers
4. ‡πÉ‡∏ä‡πâ HTTPS ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

## üö® Emergency Response

‡∏ñ‡πâ‡∏≤‡πÄ‡∏ú‡∏•‡∏≠ commit secrets:
1. Rotate/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô key ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
2. ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å git history
3. force push ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡∏°
4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö usage logs

## üìã Checklist ‡∏Å‡πà‡∏≠‡∏ô Commit

- [ ] ‡πÑ‡∏°‡πà‡∏°‡∏µ API keys ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
- [ ] ‡πÑ‡∏°‡πà‡∏°‡∏µ passwords hardcoded
- [ ] ‡πÉ‡∏ä‡πâ environment variables
- [ ] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ gitleaks
- [ ] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö security headers
- [ ] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CORS settings

## üîß Tools Integration

‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:
- gitleaks: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö secrets
- pre-commit: hooks ‡∏Å‡πà‡∏≠‡∏ô commit
- OWASP ZAP: security testing
- Snyk: dependency scanning

---
‚ö†Ô∏è ‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î
"""
        
        try:
            with open(self.cursor_rules_file, 'w', encoding='utf-8') as f:
                f.write(cursor_rules)
            self.logger.info("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cursor rules ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Cursor rules: {e}")
    
    def setup_pre_commit_hooks(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ pre-commit hooks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        pre_commit_config = """# Pre-commit hooks for security
repos:
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.0
    hooks:
      - id: gitleaks
        name: Detect secrets
        description: Detect secrets in staged files
        entry: gitleaks protect --staged --redact --verbose
        language: golang
        types: [text]

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: detect-private-key

  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3

  - repo: local
    hooks:
      - id: security-check
        name: Custom Security Check
        entry: python .security/check_security.py
        language: python
        types: [text]
        pass_filenames: true
"""
        
        pre_commit_file = self.project_path / ".pre-commit-config.yaml"
        
        try:
            with open(pre_commit_file, 'w', encoding='utf-8') as f:
                f.write(pre_commit_config)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
            self.create_custom_security_check()
            
            self.logger.info("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ pre-commit hooks ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á pre-commit config: {e}")
    
    def create_custom_security_check(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"""
        security_dir = self.project_path / ".security"
        security_dir.mkdir(exist_ok=True)
        
        security_check_script = '''#!/usr/bin/env python3
"""
Custom Security Check Script
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô commit
"""

import sys
import re
import os
from pathlib import Path

# Patterns ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
DANGEROUS_PATTERNS = [
    (r'api[_-]?key\s*[=:]\s*["\']?([a-zA-Z0-9_-]{20,})["\']?', 'API Key detected'),
    (r'secret[_-]?key\s*[=:]\s*["\']?([a-zA-Z0-9_-]{20,})["\']?', 'Secret Key detected'),
    (r'password\s*[=:]\s*["\']?([a-zA-Z0-9_-]{8,})["\']?', 'Password detected'),
    (r'token\s*[=:]\s*["\']?([a-zA-Z0-9_-]{20,})["\']?', 'Token detected'),
    (r'ghp_[a-zA-Z0-9]{36}', 'GitHub Personal Access Token detected'),
    (r'sk-[a-zA-Z0-9]{48}', 'OpenAI API Key detected'),
    (r'AKIA[a-zA-Z0-9]{16}', 'AWS Access Key detected'),
]

def check_file_security(file_path):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        
        issues = []
        for pattern, message in DANGEROUS_PATTERNS:
            matches = re.finditer(pattern, content, re.IGNORECASE)
            for match in matches:
                line_num = content[:match.start()].count('\\n') + 1
                issues.append(f"Line {line_num}: {message}")
        
        return issues
    except Exception as e:
        return [f"Error reading file: {e}"]

def main():
    """Main function"""
    if len(sys.argv) < 2:
        print("Usage: python check_security.py <file1> <file2> ...")
        sys.exit(1)
    
    total_issues = 0
    
    for file_path in sys.argv[1:]:
        if not os.path.exists(file_path):
            continue
            
        # ‡∏Ç‡πâ‡∏≤‡∏° binary files
        if file_path.endswith(('.jpg', '.png', '.gif', '.pdf', '.zip', '.exe')):
            continue
        
        issues = check_file_security(file_path)
        if issues:
            print(f"üö® Security issues in {file_path}:")
            for issue in issues:
                print(f"  - {issue}")
            total_issues += len(issues)
    
    if total_issues > 0:
        print(f"\\n‚ùå Found {total_issues} security issues!")
        print("Please remove sensitive data before committing.")
        sys.exit(1)
    else:
        print("‚úÖ No security issues found.")
        sys.exit(0)

if __name__ == "__main__":
    main()
'''
        
        security_check_file = security_dir / "check_security.py"
        
        try:
            with open(security_check_file, 'w', encoding='utf-8') as f:
                f.write(security_check_script)
            
            # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ executable
            os.chmod(security_check_file, 0o755)
            
            self.logger.info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {e}")
    
    def setup_github_actions_security(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GitHub Actions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        workflow_content = """name: Security Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security check
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Custom Security Check
      run: |
        python .security/check_security.py $(find . -type f -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.json" | head -100)

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
"""
        
        workflow_file = self.project_path / ".github" / "workflows" / "security.yml"
        
        try:
            with open(workflow_file, 'w', encoding='utf-8') as f:
                f.write(workflow_content)
            self.logger.info("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GitHub Actions security ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub Actions: {e}")
    
    def create_security_config(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        config = {
            "version": "1.0",
            "enabled": True,
            "scan_on_save": True,
            "scan_on_commit": True,
            "auto_encrypt_secrets": True,
            "allowed_domains": [],
            "blocked_patterns": self.dangerous_patterns,
            "protected_files": self.protected_files,
            "notification_webhook": "",
            "emergency_contacts": [],
            "last_scan": None,
            "scan_results": []
        }
        
        try:
            with open(self.security_config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            self.logger.info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á config: {e}")
    
    def scan_project_for_secrets(self) -> Dict:
        """‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏´‡∏≤ secrets ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
        self.logger.info("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏´‡∏≤ secrets...")
        
        results = {
            "timestamp": time.time(),
            "total_files_scanned": 0,
            "issues_found": [],
            "files_with_issues": [],
            "risk_level": "low"
        }
        
        # ‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        for file_path in self.project_path.rglob("*"):
            if file_path.is_file() and not self._should_skip_file(file_path):
                results["total_files_scanned"] += 1
                issues = self._scan_file_for_secrets(file_path)
                
                if issues:
                    results["files_with_issues"].append(str(file_path))
                    results["issues_found"].extend(issues)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        issue_count = len(results["issues_found"])
        if issue_count == 0:
            results["risk_level"] = "low"
        elif issue_count <= 5:
            results["risk_level"] = "medium"
        else:
            results["risk_level"] = "high"
        
        self.logger.info(f"‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {issue_count} ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏ô {results['total_files_scanned']} ‡πÑ‡∏ü‡∏•‡πå")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self._save_scan_results(results)
        
        return results
    
    def _should_skip_file(self, file_path: Path) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        skip_patterns = [
            ".git/", "node_modules/", "__pycache__/", ".venv/", "venv/",
            ".jpg", ".png", ".gif", ".pdf", ".zip", ".exe", ".dll",
            ".security_config.json", ".encrypted_secrets"
        ]
        
        file_str = str(file_path)
        return any(pattern in file_str for pattern in skip_patterns)
    
    def _scan_file_for_secrets(self, file_path: Path) -> List[Dict]:
        """‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤ secrets"""
        issues = []
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            for pattern in self.dangerous_patterns:
                matches = re.finditer(pattern, content, re.IGNORECASE)
                for match in matches:
                    line_num = content[:match.start()].count('\n') + 1
                    
                    issues.append({
                        "file": str(file_path),
                        "line": line_num,
                        "pattern": pattern,
                        "match": match.group(0)[:50] + "..." if len(match.group(0)) > 50 else match.group(0),
                        "severity": self._get_severity(pattern),
                        "timestamp": time.time()
                    })
        
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {file_path}: {e}")
        
        return issues
    
    def _get_severity(self, pattern: str) -> str:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á pattern"""
        high_risk_keywords = ['api_key', 'secret_key', 'private_key', 'password']
        medium_risk_keywords = ['token', 'access']
        
        pattern_lower = pattern.lower()
        
        if any(keyword in pattern_lower for keyword in high_risk_keywords):
            return "high"
        elif any(keyword in pattern_lower for keyword in medium_risk_keywords):
            return "medium"
        else:
            return "low"
    
    def _save_scan_results(self, results: Dict):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"""
        try:
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config
            if self.security_config_file.exists():
                with open(self.security_config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                config["last_scan"] = results["timestamp"]
                config["scan_results"].append(results)
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 10 ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                if len(config["scan_results"]) > 10:
                    config["scan_results"] = config["scan_results"][-10:]
                
                with open(self.security_config_file, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=2, ensure_ascii=False)
        
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô: {e}")
    
    def encrypt_secrets(self, secrets_dict: Dict[str, str], password: str) -> bool:
        """‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ secrets"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏à‡∏≤‡∏Å password
            password_bytes = password.encode()
            salt = os.urandom(16)
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=salt,
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(password_bytes))
            
            # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
            fernet = Fernet(key)
            encrypted_data = fernet.encrypt(json.dumps(secrets_dict).encode())
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            with open(self.encrypted_secrets_file, 'wb') as f:
                f.write(salt + encrypted_data)
            
            self.logger.info("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ secrets ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ secrets: {e}")
            return False
    
    def decrypt_secrets(self, password: str) -> Optional[Dict[str, str]]:
        """‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ secrets"""
        try:
            if not self.encrypted_secrets_file.exists():
                return None
            
            with open(self.encrypted_secrets_file, 'rb') as f:
                data = f.read()
            
            # ‡πÅ‡∏¢‡∏Å salt ‡πÅ‡∏•‡∏∞ encrypted data
            salt = data[:16]
            encrypted_data = data[16:]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏à‡∏≤‡∏Å password
            password_bytes = password.encode()
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=salt,
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(password_bytes))
            
            # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
            fernet = Fernet(key)
            decrypted_data = fernet.decrypt(encrypted_data)
            
            return json.loads(decrypted_data.decode())
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ secrets: {e}")
            return None
    
    def create_secure_proxy(self, api_configs: List[Dict]) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á secure proxy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API calls"""
        proxy_code = '''#!/usr/bin/env python3
"""
Secure API Proxy - ‡∏ü‡∏£‡∏µ 100%
Proxy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å APIs ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
"""

import os
import time
import hmac
import hashlib
import json
from fastapi import FastAPI, HTTPException, Header, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
import httpx
import redis
from typing import Optional

app = FastAPI(title="Secure API Proxy", version="1.0.0")

# Security Configuration
ALLOWED_ORIGINS = os.getenv("ALLOWED_ORIGINS", "").split(",")
SECRET_KEY = os.getenv("SECRET_KEY", "your-secret-key-here")
RATE_LIMIT_PER_MINUTE = int(os.getenv("RATE_LIMIT_PER_MINUTE", "60"))

# Redis for rate limiting (optional)
try:
    redis_client = redis.from_url(os.getenv("REDIS_URL", "redis://localhost:6379"))
except:
    redis_client = None

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# Trusted Host Middleware
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"]  # Configure this properly in production
)

class SecurityMiddleware:
    def __init__(self):
        self.rate_limits = {}
    
    def check_rate_limit(self, client_ip: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limit"""
        current_time = time.time()
        minute_window = int(current_time // 60)
        
        if redis_client:
            # ‡πÉ‡∏ä‡πâ Redis
            key = f"rate_limit:{client_ip}:{minute_window}"
            current_count = redis_client.get(key)
            
            if current_count is None:
                redis_client.setex(key, 60, 1)
                return True
            elif int(current_count) < RATE_LIMIT_PER_MINUTE:
                redis_client.incr(key)
                return True
            else:
                return False
        else:
            # ‡πÉ‡∏ä‡πâ memory (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development)
            if client_ip not in self.rate_limits:
                self.rate_limits[client_ip] = {}
            
            if minute_window not in self.rate_limits[client_ip]:
                self.rate_limits[client_ip][minute_window] = 1
                return True
            elif self.rate_limits[client_ip][minute_window] < RATE_LIMIT_PER_MINUTE:
                self.rate_limits[client_ip][minute_window] += 1
                return True
            else:
                return False
    
    def verify_signature(self, payload: str, signature: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HMAC signature"""
        expected_signature = hmac.new(
            SECRET_KEY.encode(),
            payload.encode(),
            hashlib.sha256
        ).hexdigest()
        
        return hmac.compare_digest(signature, expected_signature)

security = SecurityMiddleware()

@app.middleware("http")
async def security_middleware(request: Request, call_next):
    """Security middleware"""
    client_ip = request.client.host
    
    # Rate limiting
    if not security.check_rate_limit(client_ip):
        raise HTTPException(status_code=429, detail="Rate limit exceeded")
    
    # HMAC verification (optional)
    signature = request.headers.get("X-Signature")
    if signature:
        body = await request.body()
        if not security.verify_signature(body.decode(), signature):
            raise HTTPException(status_code=401, detail="Invalid signature")
    
    response = await call_next(request)
    
    # Security headers
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
    
    return response

# API Endpoints
'''

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° API endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ config
        for config in api_configs:
            api_name = config.get('name', 'api')
            api_url = config.get('url', '')
            api_key_env = config.get('api_key_env', 'API_KEY')
            
            proxy_code += f'''
@app.get("/{api_name}")
async def {api_name}_proxy(request: Request):
    """Proxy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {api_name}"""
    api_key = os.getenv("{api_key_env}")
    if not api_key:
        raise HTTPException(status_code=500, detail="API key not configured")
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            headers = {{
                "Authorization": f"Bearer {{api_key}}",
                "User-Agent": "Secure-Proxy/1.0"
            }}
            
            response = await client.get("{api_url}", headers=headers)
            response.raise_for_status()
            
            return response.json()
            
    except httpx.HTTPError as e:
        raise HTTPException(status_code=500, detail=f"API request failed: {{str(e)}}")
'''

        proxy_code += '''
@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": time.time()}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
'''
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå proxy
        proxy_file = self.project_path / "secure_proxy.py"
        
        try:
            with open(proxy_file, 'w', encoding='utf-8') as f:
                f.write(proxy_code)
            
            self.logger.info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á secure proxy ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            return str(proxy_file)
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á proxy: {e}")
            return ""
    
    def install_security_tools(self):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        self.logger.info("üîß ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...")
        
        tools = [
            "pip install pre-commit",
            "pip install gitleaks",
            "pip install bandit",
            "pip install safety",
            "npm install -g @gitguardian/ggshield"
        ]
        
        for tool in tools:
            try:
                subprocess.run(tool.split(), check=True, capture_output=True)
                self.logger.info(f"‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {tool} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            except subprocess.CalledProcessError as e:
                self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {tool}: {e}")
    
    def generate_security_report(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        scan_results = self.scan_project_for_secrets()
        
        report = f"""# üîí ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

## üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
- **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô:** {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(scan_results['timestamp']))}
- **‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô:** {scan_results['total_files_scanned']} ‡πÑ‡∏ü‡∏•‡πå
- **‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:** {len(scan_results['issues_found'])} ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
- **‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:** {scan_results['risk_level'].upper()}

## üö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö
"""
        
        if scan_results['issues_found']:
            for issue in scan_results['issues_found']:
                report += f"""
### {issue['file']} (‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î {issue['line']})
- **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á:** {issue['severity'].upper()}
- **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:** {issue['pattern'][:50]}...
- **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö:** `{issue['match']}`
"""
        else:
            report += "\n‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n"
        
        report += f"""
## üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥

### ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö API Keys ‡∏´‡∏£‡∏∑‡∏≠ Secrets:
1. **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô/Rotate keys ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ**
2. **‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å git history**
3. **‡πÉ‡∏ä‡πâ environment variables ‡πÅ‡∏ó‡∏ô**
4. **‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ .gitignore ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á**

### Best Practices:
- ‡πÉ‡∏ä‡πâ .env files (‡πÑ‡∏°‡πà commit)
- ‡∏™‡∏£‡πâ‡∏≤‡∏á backend proxy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API calls
- ‡πÉ‡∏ä‡πâ pre-commit hooks
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥

### ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:
- **gitleaks:** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö secrets
- **bandit:** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python security
- **npm audit:** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js dependencies
- **Snyk:** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö vulnerabilities

---
üõ°Ô∏è ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ GitHub Security System
"""
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report_file = self.project_path / "security_report.md"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(report)
            
            self.logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: {report_file}")
            return str(report_file)
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {e}")
            return ""

# CLI Interface
def main():
    print("üîí GitHub Security System - ‡∏ü‡∏£‡∏µ 100%")
    print("=" * 60)
    
    # ‡∏£‡∏±‡∏ö path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    project_path = input("üìÅ ‡πÉ‡∏™‡πà path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ (‡∏´‡∏£‡∏∑‡∏≠ Enter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö current directory): ").strip()
    if not project_path:
        project_path = os.getcwd()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    security_system = GitHubSecuritySystem(project_path)
    
    while True:
        print("\nüõ°Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
        print("1. ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ secrets")
        print("2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
        print("3. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ secrets")
        print("4. ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ secrets")
        print("5. ‡∏™‡∏£‡πâ‡∏≤‡∏á secure proxy")
        print("6. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
        print("7. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        
        choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-7): ").strip()
        
        try:
            if choice == "1":
                results = security_system.scan_project_for_secrets()
                print(f"\n‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏û‡∏ö {len(results['issues_found'])} ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
                
            elif choice == "2":
                report_file = security_system.generate_security_report()
                print(f"\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {report_file}")
                
            elif choice == "3":
                secrets = {}
                print("\nüîê ‡πÉ‡∏™‡πà secrets ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (‡∏û‡∏¥‡∏°‡∏û‡πå 'done' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à):")
                
                while True:
                    key = input("Key: ").strip()
                    if key.lower() == 'done':
                        break
                    value = input("Value: ").strip()
                    secrets[key] = value
                
                password = input("‡πÉ‡∏™‡πà password ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™: ").strip()
                
                if security_system.encrypt_secrets(secrets, password):
                    print("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                else:
                    print("‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    
            elif choice == "4":
                password = input("‡πÉ‡∏™‡πà password ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™: ").strip()
                secrets = security_system.decrypt_secrets(password)
                
                if secrets:
                    print("‚úÖ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:")
                    for key, value in secrets.items():
                        print(f"  {key}: {value}")
                else:
                    print("‚ùå ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    
            elif choice == "5":
                api_configs = []
                print("\nüåê ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ APIs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö proxy (‡∏û‡∏¥‡∏°‡∏û‡πå 'done' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à):")
                
                while True:
                    name = input("API Name: ").strip()
                    if name.lower() == 'done':
                        break
                    url = input("API URL: ").strip()
                    api_key_env = input("Environment Variable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Key: ").strip()
                    
                    api_configs.append({
                        'name': name,
                        'url': url,
                        'api_key_env': api_key_env
                    })
                
                proxy_file = security_system.create_secure_proxy(api_configs)
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á proxy: {proxy_file}")
                
            elif choice == "6":
                security_system.install_security_tools()
                print("‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                
            elif choice == "7":
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
                break
                
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-7")
                
        except KeyboardInterrupt:
            print("\n\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            break
        except Exception as e:
            print(f"\nüí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

if __name__ == "__main__":
    main()

